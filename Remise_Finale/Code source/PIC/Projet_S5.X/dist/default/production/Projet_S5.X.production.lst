

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Apr 18 14:04:13 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     _RPINR0_1	set	3626
    30  0000                     _RPINR12_13	set	3632
    31  0000                     _RPOR22_23	set	3613
    32  0000                     _RPOR24_25	set	3614
    33  0000                     _RPOR26_27	set	3615
    34  0000                     _SSP2BUF	set	3843
    35  0000                     _SSP2CON1	set	3865
    36  0000                     _SSP2CON1bits	set	3865
    37  0000                     _SSP2STATbits	set	3866
    38  0000                     _BAUDCONbits	set	3943
    39  0000                     _INTCONbits	set	4082
    40  0000                     _OSCCON2bits	set	3942
    41  0000                     _PIE1bits	set	3997
    42  0000                     _PIR1bits	set	3998
    43  0000                     _PIR2bits	set	4001
    44  0000                     _PORTDbits	set	3971
    45  0000                     _PORTE	set	3972
    46  0000                     _PORTEbits	set	3972
    47  0000                     _RCREG	set	4014
    48  0000                     _RCSTAbits	set	4011
    49  0000                     _SPBRG1	set	4015
    50  0000                     _TRISDbits	set	3989
    51  0000                     _TRISEbits	set	3990
    52  0000                     _TXREG	set	4013
    53  0000                     _TXSTAbits	set	4012
    54                           
    55                           	psect	smallconst
    56  000E00                     __psmallconst:
    57                           	opt stack 0
    58  000E00  00                 	db	0
    59  000E01                     STR_6:
    60  000E01  0A                 	db	10
    61  000E02  53                 	db	83	;'S'
    62  000E03  61                 	db	97	;'a'
    63  000E04  75                 	db	117	;'u'
    64  000E05  76                 	db	118	;'v'
    65  000E06  65                 	db	101	;'e'
    66  000E07  67                 	db	103	;'g'
    67  000E08  61                 	db	97	;'a'
    68  000E09  72                 	db	114	;'r'
    69  000E0A  64                 	db	100	;'d'
    70  000E0B  65                 	db	101	;'e'
    71  000E0C  20                 	db	32
    72  000E0D  31                 	db	49	;'1'
    73  000E0E  20                 	db	32
    74  000E0F  28                 	db	40
    75  000E10  4C                 	db	76	;'L'
    76  000E11  75                 	db	117	;'u'
    77  000E12  6D                 	db	109	;'m'
    78  000E13  29                 	db	41
    79  000E14  00                 	db	0
    80  000E15                     STR_8:
    81  000E15  0A                 	db	10
    82  000E16  53                 	db	83	;'S'
    83  000E17  61                 	db	97	;'a'
    84  000E18  75                 	db	117	;'u'
    85  000E19  76                 	db	118	;'v'
    86  000E1A  65                 	db	101	;'e'
    87  000E1B  67                 	db	103	;'g'
    88  000E1C  61                 	db	97	;'a'
    89  000E1D  72                 	db	114	;'r'
    90  000E1E  64                 	db	100	;'d'
    91  000E1F  65                 	db	101	;'e'
    92  000E20  20                 	db	32
    93  000E21  33                 	db	51	;'3'
    94  000E22  20                 	db	32
    95  000E23  28                 	db	40
    96  000E24  46                 	db	70	;'F'
    97  000E25  61                 	db	97	;'a'
    98  000E26  6E                 	db	110	;'n'
    99  000E27  29                 	db	41
   100  000E28  00                 	db	0
   101  000E29                     STR_9:
   102  000E29  0A                 	db	10
   103  000E2A  53                 	db	83	;'S'
   104  000E2B  61                 	db	97	;'a'
   105  000E2C  75                 	db	117	;'u'
   106  000E2D  76                 	db	118	;'v'
   107  000E2E  65                 	db	101	;'e'
   108  000E2F  67                 	db	103	;'g'
   109  000E30  61                 	db	97	;'a'
   110  000E31  72                 	db	114	;'r'
   111  000E32  64                 	db	100	;'d'
   112  000E33  65                 	db	101	;'e'
   113  000E34  20                 	db	32
   114  000E35  34                 	db	52	;'4'
   115  000E36  20                 	db	32
   116  000E37  28                 	db	40
   117  000E38  4D                 	db	77	;'M'
   118  000E39  75                 	db	117	;'u'
   119  000E3A  73                 	db	115	;'s'
   120  000E3B  29                 	db	41
   121  000E3C  00                 	db	0
   122  000E3D                     STR_7:
   123  000E3D  0A                 	db	10
   124  000E3E  53                 	db	83	;'S'
   125  000E3F  61                 	db	97	;'a'
   126  000E40  75                 	db	117	;'u'
   127  000E41  76                 	db	118	;'v'
   128  000E42  65                 	db	101	;'e'
   129  000E43  67                 	db	103	;'g'
   130  000E44  61                 	db	97	;'a'
   131  000E45  72                 	db	114	;'r'
   132  000E46  64                 	db	100	;'d'
   133  000E47  65                 	db	101	;'e'
   134  000E48  20                 	db	32
   135  000E49  32                 	db	50	;'2'
   136  000E4A  20                 	db	32
   137  000E4B  28                 	db	40
   138  000E4C  45                 	db	69	;'E'
   139  000E4D  61                 	db	97	;'a'
   140  000E4E  75                 	db	117	;'u'
   141  000E4F  29                 	db	41
   142  000E50  00                 	db	0
   143  000E51                     STR_1:
   144  000E51  50                 	db	80	;'P'
   145  000E52  31                 	db	49	;'1'
   146  000E53  20                 	db	32
   147  000E54  2D                 	db	45
   148  000E55  20                 	db	32
   149  000E56  48                 	db	72	;'H'
   150  000E57  69                 	db	105	;'i'
   151  000E58  76                 	db	118	;'v'
   152  000E59  65                 	db	101	;'e'
   153  000E5A  72                 	db	114	;'r'
   154  000E5B  20                 	db	32
   155  000E5C  32                 	db	50	;'2'
   156  000E5D  30                 	db	48	;'0'
   157  000E5E  31                 	db	49	;'1'
   158  000E5F  37                 	db	55	;'7'
   159  000E60  00                 	db	0
   160  000E61                     STR_15:
   161  000E61  6C                 	db	108	;'l'
   162  000E62  61                 	db	97	;'a'
   163  000E63  74                 	db	116	;'t'
   164  000E64  69                 	db	105	;'i'
   165  000E65  6F                 	db	111	;'o'
   166  000E66  6E                 	db	110	;'n'
   167  000E67  20                 	db	32
   168  000E68  31                 	db	49	;'1'
   169  000E69  20                 	db	32
   170  000E6A  28                 	db	40
   171  000E6B  4C                 	db	76	;'L'
   172  000E6C  75                 	db	117	;'u'
   173  000E6D  6D                 	db	109	;'m'
   174  000E6E  29                 	db	41
   175  000E6F  00                 	db	0
   176  000E70                     STR_19:
   177  000E70  6C                 	db	108	;'l'
   178  000E71  61                 	db	97	;'a'
   179  000E72  74                 	db	116	;'t'
   180  000E73  69                 	db	105	;'i'
   181  000E74  6F                 	db	111	;'o'
   182  000E75  6E                 	db	110	;'n'
   183  000E76  20                 	db	32
   184  000E77  33                 	db	51	;'3'
   185  000E78  20                 	db	32
   186  000E79  28                 	db	40
   187  000E7A  46                 	db	70	;'F'
   188  000E7B  61                 	db	97	;'a'
   189  000E7C  6E                 	db	110	;'n'
   190  000E7D  29                 	db	41
   191  000E7E  00                 	db	0
   192  000E7F                     STR_21:
   193  000E7F  6C                 	db	108	;'l'
   194  000E80  61                 	db	97	;'a'
   195  000E81  74                 	db	116	;'t'
   196  000E82  69                 	db	105	;'i'
   197  000E83  6F                 	db	111	;'o'
   198  000E84  6E                 	db	110	;'n'
   199  000E85  20                 	db	32
   200  000E86  34                 	db	52	;'4'
   201  000E87  20                 	db	32
   202  000E88  28                 	db	40
   203  000E89  4D                 	db	77	;'M'
   204  000E8A  75                 	db	117	;'u'
   205  000E8B  73                 	db	115	;'s'
   206  000E8C  29                 	db	41
   207  000E8D  00                 	db	0
   208  000E8E                     STR_17:
   209  000E8E  6C                 	db	108	;'l'
   210  000E8F  61                 	db	97	;'a'
   211  000E90  74                 	db	116	;'t'
   212  000E91  69                 	db	105	;'i'
   213  000E92  6F                 	db	111	;'o'
   214  000E93  6E                 	db	110	;'n'
   215  000E94  20                 	db	32
   216  000E95  32                 	db	50	;'2'
   217  000E96  20                 	db	32
   218  000E97  28                 	db	40
   219  000E98  45                 	db	69	;'E'
   220  000E99  61                 	db	97	;'a'
   221  000E9A  75                 	db	117	;'u'
   222  000E9B  29                 	db	41
   223  000E9C  00                 	db	0
   224  000E9D                     STR_10:
   225  000E9D  0A                 	db	10
   226  000E9E  53                 	db	83	;'S'
   227  000E9F  61                 	db	97	;'a'
   228  000EA0  75                 	db	117	;'u'
   229  000EA1  76                 	db	118	;'v'
   230  000EA2  65                 	db	101	;'e'
   231  000EA3  67                 	db	103	;'g'
   232  000EA4  61                 	db	97	;'a'
   233  000EA5  72                 	db	114	;'r'
   234  000EA6  64                 	db	100	;'d'
   235  000EA7  65                 	db	101	;'e'
   236  000EA8  20                 	db	32
   237  000EA9  35                 	db	53	;'5'
   238  000EAA  00                 	db	0
   239  000EAB                     STR_11:
   240  000EAB  0A                 	db	10
   241  000EAC  53                 	db	83	;'S'
   242  000EAD  61                 	db	97	;'a'
   243  000EAE  75                 	db	117	;'u'
   244  000EAF  76                 	db	118	;'v'
   245  000EB0  65                 	db	101	;'e'
   246  000EB1  67                 	db	103	;'g'
   247  000EB2  61                 	db	97	;'a'
   248  000EB3  72                 	db	114	;'r'
   249  000EB4  64                 	db	100	;'d'
   250  000EB5  65                 	db	101	;'e'
   251  000EB6  20                 	db	32
   252  000EB7  36                 	db	54	;'6'
   253  000EB8  00                 	db	0
   254  000EB9                     STR_3:
   255  000EB9  6D                 	db	109	;'m'
   256  000EBA  65                 	db	101	;'e'
   257  000EBB  20                 	db	32
   258  000EBC  49                 	db	73	;'I'
   259  000EBD  6E                 	db	110	;'n'
   260  000EBE  69                 	db	105	;'i'
   261  000EBF  74                 	db	116	;'t'
   262  000EC0  69                 	db	105	;'i'
   263  000EC1  61                 	db	97	;'a'
   264  000EC2  6C                 	db	108	;'l'
   265  000EC3  69                 	db	105	;'i'
   266  000EC4  73                 	db	115	;'s'
   267  000EC5  00                 	db	0
   268  000EC6                     STR_13:
   269  000EC6  0A                 	db	10
   270  000EC7  45                 	db	69	;'E'
   271  000EC8  6E                 	db	110	;'n'
   272  000EC9  20                 	db	32
   273  000ECA  61                 	db	97	;'a'
   274  000ECB  74                 	db	116	;'t'
   275  000ECC  74                 	db	116	;'t'
   276  000ECD  65                 	db	101	;'e'
   277  000ECE  6E                 	db	110	;'n'
   278  000ECF  74                 	db	116	;'t'
   279  000ED0  65                 	db	101	;'e'
   280  000ED1  00                 	db	0
   281  000ED2                     STR_23:
   282  000ED2  6C                 	db	108	;'l'
   283  000ED3  61                 	db	97	;'a'
   284  000ED4  74                 	db	116	;'t'
   285  000ED5  69                 	db	105	;'i'
   286  000ED6  6F                 	db	111	;'o'
   287  000ED7  6E                 	db	110	;'n'
   288  000ED8  20                 	db	32
   289  000ED9  35                 	db	53	;'5'
   290  000EDA  00                 	db	0
   291  000EDB                     STR_25:
   292  000EDB  6C                 	db	108	;'l'
   293  000EDC  61                 	db	97	;'a'
   294  000EDD  74                 	db	116	;'t'
   295  000EDE  69                 	db	105	;'i'
   296  000EDF  6F                 	db	111	;'o'
   297  000EE0  6E                 	db	110	;'n'
   298  000EE1  20                 	db	32
   299  000EE2  36                 	db	54	;'6'
   300  000EE3  00                 	db	0
   301  000EE4                     STR_12:
   302  000EE4  0A                 	db	10
   303  000EE5  45                 	db	69	;'E'
   304  000EE6  72                 	db	114	;'r'
   305  000EE7  72                 	db	114	;'r'
   306  000EE8  65                 	db	101	;'e'
   307  000EE9  75                 	db	117	;'u'
   308  000EEA  72                 	db	114	;'r'
   309  000EEB  00                 	db	0
   310  000EEC                     STR_14:
   311  000EEC  0A                 	db	10
   312  000EED  43                 	db	67	;'C'
   313  000EEE  6F                 	db	111	;'o'
   314  000EEF  72                 	db	114	;'r'
   315  000EF0  72                 	db	114	;'r'
   316  000EF1  00                 	db	0
   317  000EF2                     STR_2:
   318  000EF2  0A                 	db	10
   319  000EF3  53                 	db	83	;'S'
   320  000EF4  79                 	db	121	;'y'
   321  000EF5  73                 	db	115	;'s'
   322  000EF6  74                 	db	116	;'t'
   323  000EF7  00                 	db	0
   324  0000                     
   325                           ; #config settings
   326  000EF8  00                 	db	0	; dummy byte at the end
   327  0000                     
   328                           	psect	cinit
   329  001850                     __pcinit:
   330                           	opt stack 0
   331  001850                     start_initialization:
   332                           	opt stack 0
   333  001850                     __initialization:
   334                           	opt stack 0
   335                           
   336                           ; Clear objects allocated to BANK0 (42 bytes)
   337  001850  EE00  F060         	lfsr	0,__pbssBANK0
   338  001854  0E2A               	movlw	42
   339  001856                     clear_0:
   340  001856  6AEE               	clrf	postinc0,c
   341  001858  06E8               	decf	wreg,f,c
   342  00185A  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to COMRAM (50 bytes)
   345  00185C  EE00  F001         	lfsr	0,__pbssCOMRAM
   346  001860  0E32               	movlw	50
   347  001862                     clear_1:
   348  001862  6AEE               	clrf	postinc0,c
   349  001864  06E8               	decf	wreg,f,c
   350  001866  E1FD               	bnz	clear_1
   351  001868                     end_of_initialization:
   352                           	opt stack 0
   353  001868                     __end_of__initialization:
   354                           	opt stack 0
   355  001868  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   356  00186A  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   357  00186C  0100               	movlb	0
   358  00186E  EF0E  F009         	goto	_main	;jump to C main() function
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	bssCOMRAM
   363  000001                     __pbssCOMRAM:
   364                           	opt stack 0
   365  000001                     _DataLine2:
   366                           	opt stack 0
   367  000001                     	ds	21
   368  000016                     _DataLine3:
   369                           	opt stack 0
   370  000016                     	ds	21
   371  00002B                     _debounce:
   372                           	opt stack 0
   373  00002B                     	ds	2
   374  00002D                     _DataPosition:
   375                           	opt stack 0
   376  00002D                     	ds	1
   377  00002E                     _Keyboard_Data:
   378                           	opt stack 0
   379  00002E                     	ds	1
   380  00002F                     _Keyboard_NewData:
   381                           	opt stack 0
   382  00002F                     	ds	1
   383  000030                     _Keyboard_Ready:
   384                           	opt stack 0
   385  000030                     	ds	1
   386  000031                     _UART_Data:
   387                           	opt stack 0
   388  000031                     	ds	1
   389  000032                     _UART_NewData:
   390                           	opt stack 0
   391  000032                     	ds	1
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           
   395                           	psect	bssBANK0
   396  000060                     __pbssBANK0:
   397                           	opt stack 0
   398  000060                     _DataLine1:
   399                           	opt stack 0
   400  000060                     	ds	21
   401  000075                     _DataLine4:
   402                           	opt stack 0
   403  000075                     	ds	21
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	cstackBANK0
   408  00008A                     __pcstackBANK0:
   409                           	opt stack 0
   410  00008A                     LCD_WriteChar@data:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x0
   414  00008A                     	ds	1
   415  00008B                     LCD_WriteChar@i:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x1
   419  00008B                     	ds	2
   420  00008D                     LCD_WriteString@data:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x3
   424  00008D                     	ds	2
   425  00008F                     ??_LCD_WriteString:
   426                           
   427                           ; 1 bytes @ 0x5
   428  00008F                     	ds	2
   429  000091                     LCD_WriteString@i:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x7
   433  000091                     	ds	2
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437                           	psect	cstackCOMRAM
   438  000033                     __pcstackCOMRAM:
   439                           	opt stack 0
   440  000033                     ??_Interrupt:
   441  000033                     
   442                           ; 1 bytes @ 0x0
   443  000033                     	ds	14
   444  000041                     UART_Write@data:
   445                           	opt stack 0
   446  000041                     WriteSPI2@TempVar:
   447                           	opt stack 0
   448  000041                     Keyboard_Read@i:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xE
   452  000041                     	ds	1
   453  000042                     WriteSPI2@data_out:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0xF
   457  000042                     	ds	1
   458  000043                     WriteLCD@data:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x10
   462  000043                     	ds	1
   463  000044                     ??_WriteLCD:
   464                           
   465                           ; 1 bytes @ 0x11
   466  000044                     	ds	2
   467  000046                     WriteLCD@RS:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x13
   471  000046                     	ds	1
   472  000047                     WriteLCD@LowerData:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x14
   476  000047                     	ds	1
   477  000048                     WriteLCD@UpperData:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x15
   481  000048                     	ds	1
   482  000049                     WriteLCD@StartByte:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x16
   486  000049                     	ds	1
   487  00004A                     LCD_SelectLine@line:
   488                           	opt stack 0
   489  00004A                     LCD_Clear@i:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x17
   493  00004A                     	ds	1
   494  00004B                     LCD_SelectLine@data:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x18
   498  00004B                     	ds	1
   499  00004C                     ??_LCD_WriteChar:
   500                           
   501                           ; 1 bytes @ 0x19
   502  00004C                     	ds	4
   503  000050                     postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           
   506                           ; 1 bytes @ 0x1D
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 28 in file "main.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : 0/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    6
   532 ;; This function calls:
   533 ;;		_Interrupt_init
   534 ;;		_Keyboard_Read
   535 ;;		_Keyboard_init
   536 ;;		_LCD_Clear
   537 ;;		_LCD_WriteChar
   538 ;;		_LCD_WriteString
   539 ;;		_LCD_init
   540 ;;		_UART_Write
   541 ;;		_UART_init
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text0
   548  00121C                     __ptext0:
   549                           	opt stack 0
   550  00121C                     _main:
   551                           	opt stack 25
   552                           
   553                           ;main.c: 30: LCD_init();
   554                           
   555                           ;incstack = 0
   556  00121C  ECDF  F00B         	call	_LCD_init	;wreg free
   557                           
   558                           ;main.c: 31: UART_init();
   559  001220  EC13  F00C         	call	_UART_init	;wreg free
   560                           
   561                           ;main.c: 32: Interrupt_init();
   562  001224  EC54  F00C         	call	_Interrupt_init	;wreg free
   563                           
   564                           ;main.c: 33: Keyboard_init();
   565  001228  EC45  F00C         	call	_Keyboard_init	;wreg free
   566                           
   567                           ;main.c: 35: LCD_WriteString((char*)"P1 - Hiver 2017");
   568  00122C  0E51               	movlw	low STR_1
   569  00122E  0100               	movlb	0	; () banked
   570  001230  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   571  001232  0E0E               	movlw	high STR_1
   572  001234  0100               	movlb	0	; () banked
   573  001236  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   574  001238  EC05  F00B         	call	_LCD_WriteString	;wreg free
   575                           
   576                           ;main.c: 37: UART_Write('C');
   577  00123C  0E43               	movlw	67
   578  00123E  EC4E  F00C         	call	_UART_Write
   579                           
   580                           ;main.c: 39: LCD_WriteString((char*)"\nSyst");
   581  001242  0EF2               	movlw	low STR_2
   582  001244  0100               	movlb	0	; () banked
   583  001246  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   584  001248  0E0E               	movlw	high STR_2
   585  00124A  0100               	movlb	0	; () banked
   586  00124C  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   587  00124E  EC05  F00B         	call	_LCD_WriteString	;wreg free
   588                           
   589                           ;main.c: 40: LCD_WriteChar(0xA4);
   590  001252  0EA4               	movlw	164
   591  001254  EC7D  F007         	call	_LCD_WriteChar
   592                           
   593                           ;main.c: 41: LCD_WriteString((char*)"me Initialis");
   594  001258  0EB9               	movlw	low STR_3
   595  00125A  0100               	movlb	0	; () banked
   596  00125C  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   597  00125E  0E0E               	movlw	high STR_3
   598  001260  0100               	movlb	0	; () banked
   599  001262  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   600  001264  EC05  F00B         	call	_LCD_WriteString	;wreg free
   601                           
   602                           ;main.c: 42: LCD_WriteChar(0xA5);
   603  001268  0EA5               	movlw	165
   604  00126A  EC7D  F007         	call	_LCD_WriteChar
   605  00126E                     l1951:
   606                           
   607                           ;main.c: 45: {
   608                           ;main.c: 46: Keyboard_Read();
   609  00126E  EC5A  F00A         	call	_Keyboard_Read	;wreg free
   610                           
   611                           ;main.c: 48: if(Keyboard_NewData)
   612  001272  502F               	movf	_Keyboard_NewData,w,c
   613  001274  B4D8               	btfsc	status,2,c
   614  001276  D06F               	goto	l1995
   615                           
   616                           ;main.c: 49: {
   617                           ;main.c: 50: Keyboard_NewData = 0;
   618  001278  0E00               	movlw	0
   619  00127A  6E2F               	movwf	_Keyboard_NewData,c
   620                           
   621                           ;main.c: 52: UART_Write(Keyboard_Data);
   622  00127C  502E               	movf	_Keyboard_Data,w,c
   623  00127E  EC4E  F00C         	call	_UART_Write
   624                           
   625                           ;main.c: 54: if (Keyboard_Data == 'C')
   626  001282  0E43               	movlw	67
   627  001284  182E               	xorwf	_Keyboard_Data,w,c
   628  001286  A4D8               	btfss	status,2,c
   629  001288  D019               	goto	l1971
   630                           
   631                           ;main.c: 55: {
   632                           ;main.c: 56: LCD_Clear();
   633  00128A  EC89  F00B         	call	_LCD_Clear	;wreg free
   634                           
   635                           ;main.c: 57: LCD_WriteString((char*)"\nSyst");
   636  00128E  0EF2               	movlw	low STR_2
   637  001290  0100               	movlb	0	; () banked
   638  001292  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   639  001294  0E0E               	movlw	high STR_2
   640  001296  0100               	movlb	0	; () banked
   641  001298  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   642  00129A  EC05  F00B         	call	_LCD_WriteString	;wreg free
   643                           
   644                           ;main.c: 58: LCD_WriteChar(0xA4);
   645  00129E  0EA4               	movlw	164
   646  0012A0  EC7D  F007         	call	_LCD_WriteChar
   647                           
   648                           ;main.c: 59: LCD_WriteString((char*)"me Initialis");
   649  0012A4  0EB9               	movlw	low STR_3
   650  0012A6  0100               	movlb	0	; () banked
   651  0012A8  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   652  0012AA  0E0E               	movlw	high STR_3
   653  0012AC  0100               	movlb	0	; () banked
   654  0012AE  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   655  0012B0  EC05  F00B         	call	_LCD_WriteString	;wreg free
   656                           
   657                           ;main.c: 60: LCD_WriteChar(0xA5);
   658  0012B4  0EA5               	movlw	165
   659  0012B6  EC7D  F007         	call	_LCD_WriteChar
   660                           
   661                           ;main.c: 61: }
   662  0012BA  D04D               	goto	l1995
   663  0012BC                     l1971:
   664                           
   665                           ;main.c: 62: else if (Keyboard_Data == '1')
   666  0012BC  0E31               	movlw	49
   667  0012BE  182E               	xorwf	_Keyboard_Data,w,c
   668  0012C0  A4D8               	btfss	status,2,c
   669  0012C2  D009               	goto	l1975
   670                           
   671                           ;main.c: 63: {
   672                           ;main.c: 64: LCD_WriteString((char*)"\nSauvegarde 1 (Lum)");
   673  0012C4  0E01               	movlw	low STR_6
   674  0012C6  0100               	movlb	0	; () banked
   675  0012C8  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   676  0012CA  0E0E               	movlw	high STR_6
   677  0012CC  0100               	movlb	0	; () banked
   678  0012CE  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   679  0012D0  EC05  F00B         	call	_LCD_WriteString	;wreg free
   680                           
   681                           ;main.c: 65: }
   682  0012D4  D040               	goto	l1995
   683  0012D6                     l1975:
   684                           
   685                           ;main.c: 66: else if (Keyboard_Data == '2')
   686  0012D6  0E32               	movlw	50
   687  0012D8  182E               	xorwf	_Keyboard_Data,w,c
   688  0012DA  A4D8               	btfss	status,2,c
   689  0012DC  D009               	goto	l1979
   690                           
   691                           ;main.c: 67: {
   692                           ;main.c: 68: LCD_WriteString((char*)"\nSauvegarde 2 (Eau)");
   693  0012DE  0E3D               	movlw	low STR_7
   694  0012E0  0100               	movlb	0	; () banked
   695  0012E2  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   696  0012E4  0E0E               	movlw	high STR_7
   697  0012E6  0100               	movlb	0	; () banked
   698  0012E8  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   699  0012EA  EC05  F00B         	call	_LCD_WriteString	;wreg free
   700                           
   701                           ;main.c: 69: }
   702  0012EE  D033               	goto	l1995
   703  0012F0                     l1979:
   704                           
   705                           ;main.c: 70: else if (Keyboard_Data == '3')
   706  0012F0  0E33               	movlw	51
   707  0012F2  182E               	xorwf	_Keyboard_Data,w,c
   708  0012F4  A4D8               	btfss	status,2,c
   709  0012F6  D009               	goto	l1983
   710                           
   711                           ;main.c: 71: {
   712                           ;main.c: 72: LCD_WriteString((char*)"\nSauvegarde 3 (Fan)");
   713  0012F8  0E15               	movlw	low STR_8
   714  0012FA  0100               	movlb	0	; () banked
   715  0012FC  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   716  0012FE  0E0E               	movlw	high STR_8
   717  001300  0100               	movlb	0	; () banked
   718  001302  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   719  001304  EC05  F00B         	call	_LCD_WriteString	;wreg free
   720                           
   721                           ;main.c: 73: }
   722  001308  D026               	goto	l1995
   723  00130A                     l1983:
   724                           
   725                           ;main.c: 74: else if (Keyboard_Data == '4')
   726  00130A  0E34               	movlw	52
   727  00130C  182E               	xorwf	_Keyboard_Data,w,c
   728  00130E  A4D8               	btfss	status,2,c
   729  001310  D009               	goto	l1987
   730                           
   731                           ;main.c: 75: {
   732                           ;main.c: 76: LCD_WriteString((char*)"\nSauvegarde 4 (Mus)");
   733  001312  0E29               	movlw	low STR_9
   734  001314  0100               	movlb	0	; () banked
   735  001316  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   736  001318  0E0E               	movlw	high STR_9
   737  00131A  0100               	movlb	0	; () banked
   738  00131C  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   739  00131E  EC05  F00B         	call	_LCD_WriteString	;wreg free
   740                           
   741                           ;main.c: 77: }
   742  001322  D019               	goto	l1995
   743  001324                     l1987:
   744                           
   745                           ;main.c: 78: else if (Keyboard_Data == '5')
   746  001324  0E35               	movlw	53
   747  001326  182E               	xorwf	_Keyboard_Data,w,c
   748  001328  A4D8               	btfss	status,2,c
   749  00132A  D009               	goto	l1991
   750                           
   751                           ;main.c: 79: {
   752                           ;main.c: 80: LCD_WriteString((char*)"\nSauvegarde 5");
   753  00132C  0E9D               	movlw	low STR_10
   754  00132E  0100               	movlb	0	; () banked
   755  001330  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   756  001332  0E0E               	movlw	high STR_10
   757  001334  0100               	movlb	0	; () banked
   758  001336  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   759  001338  EC05  F00B         	call	_LCD_WriteString	;wreg free
   760                           
   761                           ;main.c: 81: }
   762  00133C  D00C               	goto	l1995
   763  00133E                     l1991:
   764                           
   765                           ;main.c: 82: else if (Keyboard_Data == '6')
   766  00133E  0E36               	movlw	54
   767  001340  182E               	xorwf	_Keyboard_Data,w,c
   768  001342  A4D8               	btfss	status,2,c
   769  001344  D008               	goto	l1995
   770                           
   771                           ;main.c: 83: {
   772                           ;main.c: 84: LCD_WriteString((char*)"\nSauvegarde 6");
   773  001346  0EAB               	movlw	low STR_11
   774  001348  0100               	movlb	0	; () banked
   775  00134A  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   776  00134C  0E0E               	movlw	high STR_11
   777  00134E  0100               	movlb	0	; () banked
   778  001350  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   779  001352  EC05  F00B         	call	_LCD_WriteString	;wreg free
   780  001356                     l1995:
   781                           
   782                           ;main.c: 85: }
   783                           ;main.c: 86: }
   784                           ;main.c: 88: if(UART_NewData)
   785  001356  5032               	movf	_UART_NewData,w,c	;volatile
   786  001358  B4D8               	btfsc	status,2,c
   787  00135A  D789               	goto	l1951
   788                           
   789                           ;main.c: 89: {
   790                           ;main.c: 90: UART_NewData = 0;
   791  00135C  0E00               	movlw	0
   792  00135E  6E32               	movwf	_UART_NewData,c	;volatile
   793                           
   794                           ;main.c: 92: if (UART_Data == 'N')
   795  001360  0E4E               	movlw	78
   796  001362  1831               	xorwf	_UART_Data,w,c	;volatile
   797  001364  A4D8               	btfss	status,2,c
   798  001366  D009               	goto	l2003
   799                           
   800                           ;main.c: 93: {
   801                           ;main.c: 94: LCD_WriteString((char*)"\nErreur");
   802  001368  0EE4               	movlw	low STR_12
   803  00136A  0100               	movlb	0	; () banked
   804  00136C  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   805  00136E  0E0E               	movlw	high STR_12
   806  001370  0100               	movlb	0	; () banked
   807  001372  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   808  001374  EC05  F00B         	call	_LCD_WriteString	;wreg free
   809                           
   810                           ;main.c: 95: }
   811  001378  D77A               	goto	l1951
   812  00137A                     l2003:
   813                           
   814                           ;main.c: 96: else if (UART_Data == '0')
   815  00137A  0E30               	movlw	48
   816  00137C  1831               	xorwf	_UART_Data,w,c	;volatile
   817  00137E  A4D8               	btfss	status,2,c
   818  001380  D009               	goto	l2007
   819                           
   820                           ;main.c: 97: {
   821                           ;main.c: 98: LCD_WriteString((char*)"\nEn attente");
   822  001382  0EC6               	movlw	low STR_13
   823  001384  0100               	movlb	0	; () banked
   824  001386  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   825  001388  0E0E               	movlw	high STR_13
   826  00138A  0100               	movlb	0	; () banked
   827  00138C  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   828  00138E  EC05  F00B         	call	_LCD_WriteString	;wreg free
   829                           
   830                           ;main.c: 99: }
   831  001392  D76D               	goto	l1951
   832  001394                     l2007:
   833                           
   834                           ;main.c: 100: else if (UART_Data == '1')
   835  001394  0E31               	movlw	49
   836  001396  1831               	xorwf	_UART_Data,w,c	;volatile
   837  001398  A4D8               	btfss	status,2,c
   838  00139A  D014               	goto	l2015
   839                           
   840                           ;main.c: 101: {
   841                           ;main.c: 102: LCD_WriteString((char*)"\nCorr");
   842  00139C  0EEC               	movlw	low STR_14
   843  00139E  0100               	movlb	0	; () banked
   844  0013A0  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   845  0013A2  0E0E               	movlw	high STR_14
   846  0013A4  0100               	movlb	0	; () banked
   847  0013A6  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   848  0013A8  EC05  F00B         	call	_LCD_WriteString	;wreg free
   849                           
   850                           ;main.c: 103: LCD_WriteChar(0xA5);
   851  0013AC  0EA5               	movlw	165
   852  0013AE  EC7D  F007         	call	_LCD_WriteChar
   853                           
   854                           ;main.c: 104: LCD_WriteString((char*)"lation 1 (Lum)");
   855  0013B2  0E61               	movlw	low STR_15
   856  0013B4  0100               	movlb	0	; () banked
   857  0013B6  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   858  0013B8  0E0E               	movlw	high STR_15
   859  0013BA  0100               	movlb	0	; () banked
   860  0013BC  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   861  0013BE  EC05  F00B         	call	_LCD_WriteString	;wreg free
   862                           
   863                           ;main.c: 105: }
   864  0013C2  D755               	goto	l1951
   865  0013C4                     l2015:
   866                           
   867                           ;main.c: 106: else if (UART_Data == '2')
   868  0013C4  0E32               	movlw	50
   869  0013C6  1831               	xorwf	_UART_Data,w,c	;volatile
   870  0013C8  A4D8               	btfss	status,2,c
   871  0013CA  D014               	goto	l2023
   872                           
   873                           ;main.c: 107: {
   874                           ;main.c: 108: LCD_WriteString((char*)"\nCorr");
   875  0013CC  0EEC               	movlw	low STR_14
   876  0013CE  0100               	movlb	0	; () banked
   877  0013D0  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   878  0013D2  0E0E               	movlw	high STR_14
   879  0013D4  0100               	movlb	0	; () banked
   880  0013D6  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   881  0013D8  EC05  F00B         	call	_LCD_WriteString	;wreg free
   882                           
   883                           ;main.c: 109: LCD_WriteChar(0xA5);
   884  0013DC  0EA5               	movlw	165
   885  0013DE  EC7D  F007         	call	_LCD_WriteChar
   886                           
   887                           ;main.c: 110: LCD_WriteString((char*)"lation 2 (Eau)");
   888  0013E2  0E8E               	movlw	low STR_17
   889  0013E4  0100               	movlb	0	; () banked
   890  0013E6  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   891  0013E8  0E0E               	movlw	high STR_17
   892  0013EA  0100               	movlb	0	; () banked
   893  0013EC  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   894  0013EE  EC05  F00B         	call	_LCD_WriteString	;wreg free
   895                           
   896                           ;main.c: 111: }
   897  0013F2  D73D               	goto	l1951
   898  0013F4                     l2023:
   899                           
   900                           ;main.c: 112: else if (UART_Data == '3')
   901  0013F4  0E33               	movlw	51
   902  0013F6  1831               	xorwf	_UART_Data,w,c	;volatile
   903  0013F8  A4D8               	btfss	status,2,c
   904  0013FA  D014               	goto	l2031
   905                           
   906                           ;main.c: 113: {
   907                           ;main.c: 114: LCD_WriteString((char*)"\nCorr");
   908  0013FC  0EEC               	movlw	low STR_14
   909  0013FE  0100               	movlb	0	; () banked
   910  001400  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   911  001402  0E0E               	movlw	high STR_14
   912  001404  0100               	movlb	0	; () banked
   913  001406  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   914  001408  EC05  F00B         	call	_LCD_WriteString	;wreg free
   915                           
   916                           ;main.c: 115: LCD_WriteChar(0xA5);
   917  00140C  0EA5               	movlw	165
   918  00140E  EC7D  F007         	call	_LCD_WriteChar
   919                           
   920                           ;main.c: 116: LCD_WriteString((char*)"lation 3 (Fan)");
   921  001412  0E70               	movlw	low STR_19
   922  001414  0100               	movlb	0	; () banked
   923  001416  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   924  001418  0E0E               	movlw	high STR_19
   925  00141A  0100               	movlb	0	; () banked
   926  00141C  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   927  00141E  EC05  F00B         	call	_LCD_WriteString	;wreg free
   928                           
   929                           ;main.c: 117: }
   930  001422  D725               	goto	l1951
   931  001424                     l2031:
   932                           
   933                           ;main.c: 118: else if (UART_Data == '4')
   934  001424  0E34               	movlw	52
   935  001426  1831               	xorwf	_UART_Data,w,c	;volatile
   936  001428  A4D8               	btfss	status,2,c
   937  00142A  D014               	goto	l2039
   938                           
   939                           ;main.c: 119: {
   940                           ;main.c: 120: LCD_WriteString((char*)"\nCorr");
   941  00142C  0EEC               	movlw	low STR_14
   942  00142E  0100               	movlb	0	; () banked
   943  001430  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   944  001432  0E0E               	movlw	high STR_14
   945  001434  0100               	movlb	0	; () banked
   946  001436  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   947  001438  EC05  F00B         	call	_LCD_WriteString	;wreg free
   948                           
   949                           ;main.c: 121: LCD_WriteChar(0xA5);
   950  00143C  0EA5               	movlw	165
   951  00143E  EC7D  F007         	call	_LCD_WriteChar
   952                           
   953                           ;main.c: 122: LCD_WriteString((char*)"lation 4 (Mus)");
   954  001442  0E7F               	movlw	low STR_21
   955  001444  0100               	movlb	0	; () banked
   956  001446  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   957  001448  0E0E               	movlw	high STR_21
   958  00144A  0100               	movlb	0	; () banked
   959  00144C  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   960  00144E  EC05  F00B         	call	_LCD_WriteString	;wreg free
   961                           
   962                           ;main.c: 123: }
   963  001452  D70D               	goto	l1951
   964  001454                     l2039:
   965                           
   966                           ;main.c: 124: else if (UART_Data == '5')
   967  001454  0E35               	movlw	53
   968  001456  1831               	xorwf	_UART_Data,w,c	;volatile
   969  001458  A4D8               	btfss	status,2,c
   970  00145A  D014               	goto	l2047
   971                           
   972                           ;main.c: 125: {
   973                           ;main.c: 126: LCD_WriteString((char*)"\nCorr");
   974  00145C  0EEC               	movlw	low STR_14
   975  00145E  0100               	movlb	0	; () banked
   976  001460  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   977  001462  0E0E               	movlw	high STR_14
   978  001464  0100               	movlb	0	; () banked
   979  001466  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   980  001468  EC05  F00B         	call	_LCD_WriteString	;wreg free
   981                           
   982                           ;main.c: 127: LCD_WriteChar(0xA5);
   983  00146C  0EA5               	movlw	165
   984  00146E  EC7D  F007         	call	_LCD_WriteChar
   985                           
   986                           ;main.c: 128: LCD_WriteString((char*)"lation 5");
   987  001472  0ED2               	movlw	low STR_23
   988  001474  0100               	movlb	0	; () banked
   989  001476  6F8D               	movwf	LCD_WriteString@data& (0+255),b
   990  001478  0E0E               	movlw	high STR_23
   991  00147A  0100               	movlb	0	; () banked
   992  00147C  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
   993  00147E  EC05  F00B         	call	_LCD_WriteString	;wreg free
   994                           
   995                           ;main.c: 129: }
   996  001482  D6F5               	goto	l1951
   997  001484                     l2047:
   998                           
   999                           ;main.c: 130: else if (UART_Data == '6')
  1000  001484  0E36               	movlw	54
  1001  001486  1831               	xorwf	_UART_Data,w,c	;volatile
  1002  001488  A4D8               	btfss	status,2,c
  1003  00148A  D6F1               	goto	l1951
  1004                           
  1005                           ;main.c: 131: {
  1006                           ;main.c: 132: LCD_WriteString((char*)"\nCorr");
  1007  00148C  0EEC               	movlw	low STR_14
  1008  00148E  0100               	movlb	0	; () banked
  1009  001490  6F8D               	movwf	LCD_WriteString@data& (0+255),b
  1010  001492  0E0E               	movlw	high STR_14
  1011  001494  0100               	movlb	0	; () banked
  1012  001496  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
  1013  001498  EC05  F00B         	call	_LCD_WriteString	;wreg free
  1014                           
  1015                           ;main.c: 133: LCD_WriteChar(0xA5);
  1016  00149C  0EA5               	movlw	165
  1017  00149E  EC7D  F007         	call	_LCD_WriteChar
  1018                           
  1019                           ;main.c: 134: LCD_WriteString((char*)"lation 6");
  1020  0014A2  0EDB               	movlw	low STR_25
  1021  0014A4  0100               	movlb	0	; () banked
  1022  0014A6  6F8D               	movwf	LCD_WriteString@data& (0+255),b
  1023  0014A8  0E0E               	movlw	high STR_25
  1024  0014AA  0100               	movlb	0	; () banked
  1025  0014AC  6F8E               	movwf	(LCD_WriteString@data+1)& (0+255),b
  1026  0014AE  EC05  F00B         	call	_LCD_WriteString	;wreg free
  1027  0014B2  D6DD               	goto	l1951
  1028  0014B4                     __end_of_main:
  1029                           	opt stack 0
  1030                           postinc0	equ	0xFEE
  1031                           wreg	equ	0xFE8
  1032                           status	equ	0xFD8
  1033                           
  1034 ;; *************** function _UART_init *****************
  1035 ;; Defined at:
  1036 ;;		line 11 in file "UART.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1054 ;;Total ram usage:        0 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text1
  1065  001826                     __ptext1:
  1066                           	opt stack 0
  1067  001826                     _UART_init:
  1068                           	opt stack 29
  1069                           
  1070                           ;UART.c: 13: TRISDbits.TRISD6 = 0;
  1071                           
  1072                           ;incstack = 0
  1073  001826  9C95               	bcf	3989,6,c	;volatile
  1074                           
  1075                           ;UART.c: 14: TRISDbits.TRISD7 = 1;
  1076  001828  8E95               	bsf	3989,7,c	;volatile
  1077                           
  1078                           ;UART.c: 16: OSCCON2bits.IOLOCK = 0;
  1079  00182A  9C66               	bcf	3942,6,c	;volatile
  1080                           
  1081                           ;UART.c: 17: RPOR26_27 = 0x11;
  1082  00182C  0E11               	movlw	17
  1083  00182E  010E               	movlb	14	; () banked
  1084  001830  6F1F               	movwf	31,b	;volatile
  1085                           
  1086                           ;UART.c: 18: RPINR0_1 = 0x66;
  1087  001832  0E66               	movlw	102
  1088  001834  010E               	movlb	14	; () banked
  1089  001836  6F2A               	movwf	42,b	;volatile
  1090                           
  1091                           ; BSR set to: 14
  1092                           ;UART.c: 19: OSCCON2bits.IOLOCK = 1;
  1093  001838  8C66               	bsf	3942,6,c	;volatile
  1094                           
  1095                           ;UART.c: 22: SPBRG1 = 34;
  1096  00183A  0E22               	movlw	34
  1097  00183C  6EAF               	movwf	4015,c	;volatile
  1098                           
  1099                           ; BSR set to: 14
  1100                           ;UART.c: 23: TXSTAbits.BRGH = 1;
  1101  00183E  84AC               	bsf	4012,2,c	;volatile
  1102                           
  1103                           ; BSR set to: 14
  1104                           ;UART.c: 24: BAUDCONbits.BRG16 = 0;
  1105  001840  9667               	bcf	3943,3,c	;volatile
  1106                           
  1107                           ; BSR set to: 14
  1108                           ;UART.c: 25: TXSTAbits.SYNC = 0;
  1109  001842  98AC               	bcf	4012,4,c	;volatile
  1110                           
  1111                           ; BSR set to: 14
  1112                           ;UART.c: 26: RCSTAbits.SPEN = 1;
  1113  001844  8EAB               	bsf	4011,7,c	;volatile
  1114                           
  1115                           ; BSR set to: 14
  1116                           ;UART.c: 28: TXSTAbits.TX9 = 0;
  1117  001846  9CAC               	bcf	4012,6,c	;volatile
  1118                           
  1119                           ; BSR set to: 14
  1120                           ;UART.c: 29: TXSTAbits.TXEN = 1;
  1121  001848  8AAC               	bsf	4012,5,c	;volatile
  1122                           
  1123                           ; BSR set to: 14
  1124                           ;UART.c: 31: RCSTAbits.RX9 = 0;
  1125  00184A  9CAB               	bcf	4011,6,c	;volatile
  1126                           
  1127                           ; BSR set to: 14
  1128                           ;UART.c: 32: RCSTAbits.CREN = 1;
  1129  00184C  88AB               	bsf	4011,4,c	;volatile
  1130                           
  1131                           ; BSR set to: 14
  1132  00184E  0012               	return		;funcret
  1133  001850                     __end_of_UART_init:
  1134                           	opt stack 0
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function _UART_Write *****************
  1140 ;; Defined at:
  1141 ;;		line 35 in file "UART.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  data            1    wreg     unsigned char 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  data            1   14[COMRAM] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1159 ;;Total ram usage:        1 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text2
  1170  00189C                     __ptext2:
  1171                           	opt stack 0
  1172  00189C                     _UART_Write:
  1173                           	opt stack 29
  1174                           
  1175                           ; BSR set to: 14
  1176                           ;incstack = 0
  1177                           ;UART_Write@data stored from wreg
  1178  00189C  6E41               	movwf	UART_Write@data,c
  1179  00189E                     l207:
  1180  00189E  A89E               	btfss	3998,4,c	;volatile
  1181  0018A0  D7FE               	goto	l207
  1182                           
  1183                           ;UART.c: 38: TXREG = data;
  1184  0018A2  C041  FFAD         	movff	UART_Write@data,4013	;volatile
  1185  0018A6  0012               	return		;funcret
  1186  0018A8                     __end_of_UART_Write:
  1187                           	opt stack 0
  1188                           postinc0	equ	0xFEE
  1189                           wreg	equ	0xFE8
  1190                           status	equ	0xFD8
  1191                           
  1192 ;; *************** function _LCD_init *****************
  1193 ;; Defined at:
  1194 ;;		line 69 in file "LCD.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;Total ram usage:        0 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    3
  1215 ;; This function calls:
  1216 ;;		_SPI2_init
  1217 ;;		_WriteLCD
  1218 ;; This function is called by:
  1219 ;;		_main
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text3
  1224  0017BE                     __ptext3:
  1225                           	opt stack 0
  1226  0017BE                     _LCD_init:
  1227                           	opt stack 27
  1228                           
  1229                           ;LCD.c: 71: SPI2_init();
  1230                           
  1231                           ;incstack = 0
  1232  0017BE  ECFB  F00B         	call	_SPI2_init	;wreg free
  1233                           
  1234                           ;LCD.c: 73: WriteLCD(0,0x3C);
  1235  0017C2  0E3C               	movlw	60
  1236  0017C4  6E43               	movwf	WriteLCD@data,c
  1237  0017C6  0E00               	movlw	0
  1238  0017C8  EC48  F00B         	call	_WriteLCD
  1239                           
  1240                           ;LCD.c: 74: WriteLCD(0,0x09);
  1241  0017CC  0E09               	movlw	9
  1242  0017CE  6E43               	movwf	WriteLCD@data,c
  1243  0017D0  0E00               	movlw	0
  1244  0017D2  EC48  F00B         	call	_WriteLCD
  1245                           
  1246                           ;LCD.c: 75: WriteLCD(0,0x38);
  1247  0017D6  0E38               	movlw	56
  1248  0017D8  6E43               	movwf	WriteLCD@data,c
  1249  0017DA  0E00               	movlw	0
  1250  0017DC  EC48  F00B         	call	_WriteLCD
  1251                           
  1252                           ;LCD.c: 76: WriteLCD(0,0x0C);
  1253  0017E0  0E0C               	movlw	12
  1254  0017E2  6E43               	movwf	WriteLCD@data,c
  1255  0017E4  0E00               	movlw	0
  1256  0017E6  EC48  F00B         	call	_WriteLCD
  1257                           
  1258                           ;LCD.c: 77: WriteLCD(0,0x01);
  1259  0017EA  0E01               	movlw	1
  1260  0017EC  6E43               	movwf	WriteLCD@data,c
  1261  0017EE  0E00               	movlw	0
  1262  0017F0  EC48  F00B         	call	_WriteLCD
  1263  0017F4  0012               	return		;funcret
  1264  0017F6                     __end_of_LCD_init:
  1265                           	opt stack 0
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           status	equ	0xFD8
  1269                           
  1270 ;; *************** function _SPI2_init *****************
  1271 ;; Defined at:
  1272 ;;		line 21 in file "LCD.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1290 ;;Total ram usage:        0 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    1
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_LCD_init
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text4
  1301  0017F6                     __ptext4:
  1302                           	opt stack 0
  1303  0017F6                     _SPI2_init:
  1304                           	opt stack 28
  1305                           
  1306                           ;LCD.c: 23: TRISDbits.TRISD1 = 1;
  1307                           
  1308                           ;incstack = 0
  1309  0017F6  8295               	bsf	3989,1,c	;volatile
  1310                           
  1311                           ;LCD.c: 24: TRISDbits.TRISD2 = 0;
  1312  0017F8  9495               	bcf	3989,2,c	;volatile
  1313                           
  1314                           ;LCD.c: 25: TRISDbits.TRISD3 = 0;
  1315  0017FA  9695               	bcf	3989,3,c	;volatile
  1316                           
  1317                           ;LCD.c: 26: TRISDbits.TRISD4 = 0;
  1318  0017FC  9895               	bcf	3989,4,c	;volatile
  1319                           
  1320                           ;LCD.c: 28: OSCCON2bits.IOLOCK = 0;
  1321  0017FE  9C66               	bcf	3942,6,c	;volatile
  1322                           
  1323                           ;LCD.c: 29: RPINR12_13 |= 0x05;
  1324  001800  0E05               	movlw	5
  1325  001802  010E               	movlb	14	; () banked
  1326  001804  1330               	iorwf	48,f,b	;volatile
  1327                           
  1328                           ;LCD.c: 30: RPOR22_23 |= 0x05;
  1329  001806  0E05               	movlw	5
  1330  001808  010E               	movlb	14	; () banked
  1331  00180A  131D               	iorwf	29,f,b	;volatile
  1332                           
  1333                           ; BSR set to: 14
  1334                           ;LCD.c: 31: RPOR24_25 |= 0x04;
  1335  00180C  010E               	movlb	14	; () banked
  1336  00180E  851E               	bsf	30,2,b	;volatile
  1337                           
  1338                           ; BSR set to: 14
  1339                           ;LCD.c: 32: OSCCON2bits.IOLOCK = 1;
  1340  001810  8C66               	bsf	3942,6,c	;volatile
  1341                           
  1342                           ; BSR set to: 14
  1343                           ;LCD.c: 35: SSP2CON1bits.SSPEN2 = 1;
  1344  001812  010F               	movlb	15	; () banked
  1345  001814  8B19               	bsf	25,5,b	;volatile
  1346                           
  1347                           ; BSR set to: 15
  1348                           ;LCD.c: 36: SSP2STATbits.CKE2 = 0;
  1349  001816  010F               	movlb	15	; () banked
  1350  001818  9D1A               	bcf	26,6,b	;volatile
  1351                           
  1352                           ; BSR set to: 15
  1353                           ;LCD.c: 37: SSP2CON1bits.CKP2 = 1;
  1354  00181A  010F               	movlb	15	; () banked
  1355  00181C  8919               	bsf	25,4,b	;volatile
  1356                           
  1357                           ; BSR set to: 15
  1358                           ;LCD.c: 39: SSP2CON1 = 0b00110010;
  1359  00181E  0E32               	movlw	50
  1360  001820  010F               	movlb	15	; () banked
  1361  001822  6F19               	movwf	25,b	;volatile
  1362                           
  1363                           ; BSR set to: 15
  1364  001824  0012               	return		;funcret
  1365  001826                     __end_of_SPI2_init:
  1366                           	opt stack 0
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           status	equ	0xFD8
  1370                           
  1371 ;; *************** function _LCD_WriteString *****************
  1372 ;; Defined at:
  1373 ;;		line 223 in file "LCD.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  data            2    3[BANK0 ] PTR unsigned char 
  1376 ;;		 -> STR_25(9), STR_24(6), STR_23(9), STR_22(6), 
  1377 ;;		 -> STR_21(15), STR_20(6), STR_19(15), STR_18(6), 
  1378 ;;		 -> STR_17(15), STR_16(6), STR_15(15), STR_14(6), 
  1379 ;;		 -> STR_13(12), STR_12(8), STR_11(14), STR_10(14), 
  1380 ;;		 -> STR_9(20), STR_8(20), STR_7(20), STR_6(20), 
  1381 ;;		 -> STR_5(13), STR_4(6), STR_3(13), STR_2(6), 
  1382 ;;		 -> STR_1(16), 
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  i               2    7[BANK0 ] int 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1394 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1398 ;;Total ram usage:        6 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    5
  1401 ;; This function calls:
  1402 ;;		_LCD_WriteChar
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text5
  1409  00160A                     __ptext5:
  1410                           	opt stack 0
  1411  00160A                     _LCD_WriteString:
  1412                           	opt stack 25
  1413                           
  1414                           ;LCD.c: 225: int i = 0;
  1415                           
  1416                           ; BSR set to: 15
  1417                           ;incstack = 0
  1418  00160A  0E00               	movlw	0
  1419  00160C  0100               	movlb	0	; () banked
  1420  00160E  6F92               	movwf	(LCD_WriteString@i+1)& (0+255),b
  1421  001610  0E00               	movlw	0
  1422  001612  6F91               	movwf	LCD_WriteString@i& (0+255),b
  1423                           
  1424                           ;LCD.c: 226: while (data[i] != '\0' && i < 80)
  1425  001614  D019               	goto	l1911
  1426  001616                     l1907:
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;LCD.c: 227: {
  1430                           ;LCD.c: 228: LCD_WriteChar(data[i]);
  1431  001616  0100               	movlb	0	; () banked
  1432  001618  5191               	movf	LCD_WriteString@i& (0+255),w,b
  1433  00161A  0100               	movlb	0	; () banked
  1434  00161C  258D               	addwf	LCD_WriteString@data& (0+255),w,b
  1435  00161E  0100               	movlb	0	; () banked
  1436  001620  6F8F               	movwf	??_LCD_WriteString& (0+255),b
  1437  001622  0100               	movlb	0	; () banked
  1438  001624  5192               	movf	(LCD_WriteString@i+1)& (0+255),w,b
  1439  001626  0100               	movlb	0	; () banked
  1440  001628  218E               	addwfc	(LCD_WriteString@data+1)& (0+255),w,b
  1441  00162A  0100               	movlb	0	; () banked
  1442  00162C  6F90               	movwf	(??_LCD_WriteString+1)& (0+255),b
  1443  00162E  C08F  FFF6         	movff	??_LCD_WriteString,tblptrl
  1444  001632  C090  FFF7         	movff	??_LCD_WriteString+1,tblptrh
  1445  001636                     	if	0	;tblptru may be non-zero
  1446  001636                     	endif
  1447  001636                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1448  001636  0E00               	movlw	low (__mediumconst shr (0+16))
  1449  001638  6EF8               	movwf	tblptru,c
  1450  00163A                     	endif
  1451  00163A  0008               	tblrd		*
  1452  00163C  50F5               	movf	tablat,w,c
  1453  00163E  EC7D  F007         	call	_LCD_WriteChar
  1454                           
  1455                           ;LCD.c: 229: i++;
  1456  001642  0100               	movlb	0	; () banked
  1457  001644  4B91               	infsnz	LCD_WriteString@i& (0+255),f,b
  1458  001646  2B92               	incf	(LCD_WriteString@i+1)& (0+255),f,b
  1459  001648                     l1911:
  1460                           
  1461                           ; BSR set to: 0
  1462  001648  0100               	movlb	0	; () banked
  1463  00164A  5191               	movf	LCD_WriteString@i& (0+255),w,b
  1464  00164C  0100               	movlb	0	; () banked
  1465  00164E  258D               	addwf	LCD_WriteString@data& (0+255),w,b
  1466  001650  0100               	movlb	0	; () banked
  1467  001652  6F8F               	movwf	??_LCD_WriteString& (0+255),b
  1468  001654  0100               	movlb	0	; () banked
  1469  001656  5192               	movf	(LCD_WriteString@i+1)& (0+255),w,b
  1470  001658  0100               	movlb	0	; () banked
  1471  00165A  218E               	addwfc	(LCD_WriteString@data+1)& (0+255),w,b
  1472  00165C  0100               	movlb	0	; () banked
  1473  00165E  6F90               	movwf	(??_LCD_WriteString+1)& (0+255),b
  1474  001660  C08F  FFF6         	movff	??_LCD_WriteString,tblptrl
  1475  001664  C090  FFF7         	movff	??_LCD_WriteString+1,tblptrh
  1476  001668                     	if	0	;tblptru may be non-zero
  1477  001668                     	endif
  1478  001668                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1479  001668  0E00               	movlw	low (__mediumconst shr (0+16))
  1480  00166A  6EF8               	movwf	tblptru,c
  1481  00166C                     	endif
  1482  00166C  0008               	tblrd		*
  1483  00166E  50F5               	movf	tablat,w,c
  1484  001670  0900               	iorlw	0
  1485  001672  B4D8               	btfsc	status,2,c
  1486  001674  0012               	return	
  1487                           
  1488                           ; BSR set to: 0
  1489  001676  0100               	movlb	0	; () banked
  1490  001678  BF92               	btfsc	(LCD_WriteString@i+1)& (0+255),7,b
  1491  00167A  D7CD               	goto	l1907
  1492  00167C  0100               	movlb	0	; () banked
  1493  00167E  5192               	movf	(LCD_WriteString@i+1)& (0+255),w,b
  1494  001680  E106               	bnz	l171
  1495  001682  0E50               	movlw	80
  1496  001684  0100               	movlb	0	; () banked
  1497  001686  5D91               	subwf	LCD_WriteString@i& (0+255),w,b
  1498  001688  B0D8               	btfsc	status,0,c
  1499  00168A  0012               	return	
  1500  00168C  D7C4               	goto	l1907
  1501  00168E                     l171:
  1502                           
  1503                           ; BSR set to: 0
  1504  00168E  0012               	return		;funcret
  1505  001690                     __end_of_LCD_WriteString:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _LCD_WriteChar *****************
  1516 ;; Defined at:
  1517 ;;		line 96 in file "LCD.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  data            1    wreg     unsigned char 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  data            1    0[BANK0 ] unsigned char 
  1522 ;;  i               2    1[BANK0 ] int 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      void 
  1525 ;; Registers used:
  1526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1534 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1535 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1536 ;;Total ram usage:        7 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    4
  1539 ;; This function calls:
  1540 ;;		_LCD_SelectLine
  1541 ;;		_WriteLCD
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;;		_LCD_WriteString
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text6
  1549  000EFA                     __ptext6:
  1550                           	opt stack 0
  1551  000EFA                     _LCD_WriteChar:
  1552                           	opt stack 25
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;incstack = 0
  1556                           ;LCD_WriteChar@data stored from wreg
  1557  000EFA  0100               	movlb	0	; () banked
  1558  000EFC  6F8A               	movwf	LCD_WriteChar@data& (0+255),b
  1559                           
  1560                           ;LCD.c: 98: int i = 0;
  1561  000EFE  0E00               	movlw	0
  1562  000F00  0100               	movlb	0	; () banked
  1563  000F02  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  1564  000F04  0E00               	movlw	0
  1565  000F06  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;LCD.c: 101: if(DataPosition < 20)
  1569  000F08  0E14               	movlw	20
  1570  000F0A  602D               	cpfslt	_DataPosition,c
  1571  000F0C  D012               	goto	l1779
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;LCD.c: 102: {
  1575                           ;LCD.c: 103: if(data == '\n')
  1576  000F0E  0E0A               	movlw	10
  1577  000F10  0100               	movlb	0	; () banked
  1578  000F12  198A               	xorwf	LCD_WriteChar@data& (0+255),w,b
  1579  000F14  A4D8               	btfss	status,2,c
  1580  000F16  D005               	goto	l1777
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;LCD.c: 104: {
  1584                           ;LCD.c: 106: LCD_SelectLine(2);
  1585  000F18  0E02               	movlw	2
  1586  000F1A  ECC0  F00B         	call	_LCD_SelectLine
  1587                           
  1588                           ;LCD.c: 107: DataPosition = 20;
  1589  000F1E  0E14               	movlw	20
  1590  000F20  D04F               	goto	L5
  1591  000F22                     l1777:
  1592                           
  1593                           ;LCD.c: 109: else
  1594                           ;LCD.c: 110: {
  1595                           ;LCD.c: 112: DataLine1[DataPosition] = data;
  1596  000F22  502D               	movf	_DataPosition,w,c
  1597  000F24  0D01               	mullw	1
  1598  000F26  0E60               	movlw	low _DataLine1
  1599  000F28  24F3               	addwf	prodl,w,c
  1600  000F2A  6ED9               	movwf	fsr2l,c
  1601  000F2C  0E00               	movlw	high _DataLine1
  1602  000F2E  20F4               	addwfc	prodh,w,c
  1603  000F30  D01D               	goto	L2
  1604  000F32                     l1779:
  1605                           
  1606                           ;LCD.c: 115: else if(DataPosition < 40)
  1607  000F32  0E28               	movlw	40
  1608  000F34  602D               	cpfslt	_DataPosition,c
  1609  000F36  D01E               	goto	l1789
  1610                           
  1611                           ;LCD.c: 116: {
  1612                           ;LCD.c: 117: if(data == '\n')
  1613  000F38  0E0A               	movlw	10
  1614  000F3A  0100               	movlb	0	; () banked
  1615  000F3C  198A               	xorwf	LCD_WriteChar@data& (0+255),w,b
  1616  000F3E  A4D8               	btfss	status,2,c
  1617  000F40  D005               	goto	l1787
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;LCD.c: 118: {
  1621                           ;LCD.c: 120: LCD_SelectLine(3);
  1622  000F42  0E03               	movlw	3
  1623  000F44  ECC0  F00B         	call	_LCD_SelectLine
  1624                           
  1625                           ;LCD.c: 121: DataPosition = 40;
  1626  000F48  0E28               	movlw	40
  1627  000F4A  D03A               	goto	L5
  1628  000F4C                     l1787:
  1629                           
  1630                           ;LCD.c: 123: else
  1631                           ;LCD.c: 124: {
  1632                           ;LCD.c: 126: DataLine2[DataPosition-20] = data;
  1633  000F4C  0EEC               	movlw	236
  1634  000F4E  6E4C               	movwf	??_LCD_WriteChar& (0+255),c
  1635  000F50  0EFF               	movlw	255
  1636  000F52  6E4D               	movwf	(??_LCD_WriteChar+1)& (0+255),c
  1637  000F54  502D               	movf	_DataPosition,w,c
  1638  000F56  6E4E               	movwf	(??_LCD_WriteChar+2)& (0+255),c
  1639  000F58  6A4F               	clrf	(??_LCD_WriteChar+3)& (0+255),c
  1640  000F5A  504C               	movf	??_LCD_WriteChar,w,c
  1641  000F5C  264E               	addwf	??_LCD_WriteChar+2,f,c
  1642  000F5E  504D               	movf	??_LCD_WriteChar+1,w,c
  1643  000F60  224F               	addwfc	??_LCD_WriteChar+3,f,c
  1644  000F62  0E01               	movlw	low _DataLine2
  1645  000F64  244E               	addwf	??_LCD_WriteChar+2,w,c
  1646  000F66  6ED9               	movwf	fsr2l,c
  1647  000F68  0E00               	movlw	high _DataLine2
  1648  000F6A  D03B               	goto	L6
  1649  000F6C                     L2:
  1650  000F6C  6EDA               	movwf	fsr2h,c
  1651  000F6E  C08A  FFDF         	movff	LCD_WriteChar@data,indf2
  1652                           
  1653                           ;LCD.c: 127: }
  1654                           ;LCD.c: 128: }
  1655  000F72  D039               	goto	l1807
  1656  000F74                     l1789:
  1657                           
  1658                           ;LCD.c: 129: else if(DataPosition < 60)
  1659  000F74  0E3C               	movlw	60
  1660  000F76  602D               	cpfslt	_DataPosition,c
  1661  000F78  D01A               	goto	l1799
  1662                           
  1663                           ;LCD.c: 130: {
  1664                           ;LCD.c: 131: if(data == '\n')
  1665  000F7A  0E0A               	movlw	10
  1666  000F7C  0100               	movlb	0	; () banked
  1667  000F7E  198A               	xorwf	LCD_WriteChar@data& (0+255),w,b
  1668  000F80  A4D8               	btfss	status,2,c
  1669  000F82  D005               	goto	l1797
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;LCD.c: 132: {
  1673                           ;LCD.c: 134: LCD_SelectLine(4);
  1674  000F84  0E04               	movlw	4
  1675  000F86  ECC0  F00B         	call	_LCD_SelectLine
  1676                           
  1677                           ;LCD.c: 135: DataPosition = 60;
  1678  000F8A  0E3C               	movlw	60
  1679  000F8C  D019               	goto	L5
  1680  000F8E                     l1797:
  1681                           
  1682                           ;LCD.c: 137: else
  1683                           ;LCD.c: 138: {
  1684                           ;LCD.c: 140: DataLine3[DataPosition-40] = data;
  1685  000F8E  0ED8               	movlw	216
  1686  000F90  6E4C               	movwf	??_LCD_WriteChar& (0+255),c
  1687  000F92  0EFF               	movlw	255
  1688  000F94  6E4D               	movwf	(??_LCD_WriteChar+1)& (0+255),c
  1689  000F96  502D               	movf	_DataPosition,w,c
  1690  000F98  6E4E               	movwf	(??_LCD_WriteChar+2)& (0+255),c
  1691  000F9A  6A4F               	clrf	(??_LCD_WriteChar+3)& (0+255),c
  1692  000F9C  504C               	movf	??_LCD_WriteChar,w,c
  1693  000F9E  264E               	addwf	??_LCD_WriteChar+2,f,c
  1694  000FA0  504D               	movf	??_LCD_WriteChar+1,w,c
  1695  000FA2  224F               	addwfc	??_LCD_WriteChar+3,f,c
  1696  000FA4  0E16               	movlw	low _DataLine3
  1697  000FA6  244E               	addwf	??_LCD_WriteChar+2,w,c
  1698  000FA8  6ED9               	movwf	fsr2l,c
  1699  000FAA  0E00               	movlw	high _DataLine3
  1700  000FAC  D01A               	goto	L6
  1701  000FAE                     l1799:
  1702                           
  1703                           ;LCD.c: 143: else if(DataPosition < 80)
  1704  000FAE  0E50               	movlw	80
  1705  000FB0  602D               	cpfslt	_DataPosition,c
  1706  000FB2  D019               	goto	l1807
  1707                           
  1708                           ;LCD.c: 144: {
  1709                           ;LCD.c: 145: if(data == '\n')
  1710  000FB4  0E0A               	movlw	10
  1711  000FB6  0100               	movlb	0	; () banked
  1712  000FB8  198A               	xorwf	LCD_WriteChar@data& (0+255),w,b
  1713  000FBA  A4D8               	btfss	status,2,c
  1714  000FBC  D003               	goto	l1805
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;LCD.c: 146: {
  1718                           ;LCD.c: 148: DataPosition = 80;
  1719  000FBE  0E50               	movlw	80
  1720  000FC0                     L5:
  1721  000FC0  6E2D               	movwf	_DataPosition,c
  1722                           
  1723                           ;LCD.c: 149: }
  1724  000FC2  D011               	goto	l1807
  1725  000FC4                     l1805:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;LCD.c: 150: else
  1729                           ;LCD.c: 151: {
  1730                           ;LCD.c: 153: DataLine4[DataPosition-60] = data;
  1731  000FC4  0EC4               	movlw	196
  1732  000FC6  6E4C               	movwf	??_LCD_WriteChar& (0+255),c
  1733  000FC8  0EFF               	movlw	255
  1734  000FCA  6E4D               	movwf	(??_LCD_WriteChar+1)& (0+255),c
  1735  000FCC  502D               	movf	_DataPosition,w,c
  1736  000FCE  6E4E               	movwf	(??_LCD_WriteChar+2)& (0+255),c
  1737  000FD0  6A4F               	clrf	(??_LCD_WriteChar+3)& (0+255),c
  1738  000FD2  504C               	movf	??_LCD_WriteChar,w,c
  1739  000FD4  264E               	addwf	??_LCD_WriteChar+2,f,c
  1740  000FD6  504D               	movf	??_LCD_WriteChar+1,w,c
  1741  000FD8  224F               	addwfc	??_LCD_WriteChar+3,f,c
  1742  000FDA  0E75               	movlw	low _DataLine4
  1743  000FDC  244E               	addwf	??_LCD_WriteChar+2,w,c
  1744  000FDE  6ED9               	movwf	fsr2l,c
  1745  000FE0  0E00               	movlw	high _DataLine4
  1746  000FE2                     L6:
  1747  000FE2  204F               	addwfc	??_LCD_WriteChar+3,w,c
  1748  000FE4  D7C3               	goto	L2
  1749  000FE6                     l1807:
  1750                           
  1751                           ;LCD.c: 154: }
  1752                           ;LCD.c: 155: }
  1753                           ;LCD.c: 158: if (DataPosition >= 80)
  1754  000FE6  0E4F               	movlw	79
  1755  000FE8  642D               	cpfsgt	_DataPosition,c
  1756  000FEA  D10C               	goto	l1897
  1757                           
  1758                           ;LCD.c: 159: {
  1759                           ;LCD.c: 161: WriteLCD(0,0x01);
  1760  000FEC  0E01               	movlw	1
  1761  000FEE  6E43               	movwf	WriteLCD@data,c
  1762  000FF0  0E00               	movlw	0
  1763  000FF2  EC48  F00B         	call	_WriteLCD
  1764                           
  1765                           ;LCD.c: 164: for(i=0;i<20;i++)
  1766  000FF6  0E00               	movlw	0
  1767  000FF8  0100               	movlb	0	; () banked
  1768  000FFA  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  1769  000FFC  0E00               	movlw	0
  1770  000FFE  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  1771  001000                     l1813:
  1772                           
  1773                           ; BSR set to: 0
  1774  001000  0100               	movlb	0	; () banked
  1775  001002  BF8C               	btfsc	(LCD_WriteChar@i+1)& (0+255),7,b
  1776  001004  D008               	goto	l1817
  1777  001006  0100               	movlb	0	; () banked
  1778  001008  518C               	movf	(LCD_WriteChar@i+1)& (0+255),w,b
  1779  00100A  E11B               	bnz	l1823
  1780  00100C  0E14               	movlw	20
  1781  00100E  0100               	movlb	0	; () banked
  1782  001010  5D8B               	subwf	LCD_WriteChar@i& (0+255),w,b
  1783  001012  B0D8               	btfsc	status,0,c
  1784  001014  D016               	goto	l1823
  1785  001016                     l1817:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;LCD.c: 165: {
  1789                           ;LCD.c: 166: DataLine1[i] = DataLine2[i];
  1790  001016  0E01               	movlw	low _DataLine2
  1791  001018  0100               	movlb	0	; () banked
  1792  00101A  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1793  00101C  6ED9               	movwf	fsr2l,c
  1794  00101E  0E00               	movlw	high _DataLine2
  1795  001020  0100               	movlb	0	; () banked
  1796  001022  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1797  001024  6EDA               	movwf	fsr2h,c
  1798  001026  0E60               	movlw	low _DataLine1
  1799  001028  0100               	movlb	0	; () banked
  1800  00102A  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1801  00102C  6EE1               	movwf	fsr1l,c
  1802  00102E  0E00               	movlw	high _DataLine1
  1803  001030  0100               	movlb	0	; () banked
  1804  001032  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1805  001034  6EE2               	movwf	fsr1h,c
  1806  001036  CFDF FFE7          	movff	indf2,indf1
  1807                           
  1808                           ; BSR set to: 0
  1809  00103A  0100               	movlb	0	; () banked
  1810  00103C  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  1811  00103E  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  1812  001040  D7DF               	goto	l1813
  1813  001042                     l1823:
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;LCD.c: 167: }
  1817                           ;LCD.c: 168: for(i=0;i<20;i++)
  1818  001042  0E00               	movlw	0
  1819  001044  0100               	movlb	0	; () banked
  1820  001046  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  1821  001048  0E00               	movlw	0
  1822  00104A  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  1823  00104C                     l1825:
  1824                           
  1825                           ; BSR set to: 0
  1826  00104C  0100               	movlb	0	; () banked
  1827  00104E  BF8C               	btfsc	(LCD_WriteChar@i+1)& (0+255),7,b
  1828  001050  D008               	goto	l1829
  1829  001052  0100               	movlb	0	; () banked
  1830  001054  518C               	movf	(LCD_WriteChar@i+1)& (0+255),w,b
  1831  001056  E11B               	bnz	l1835
  1832  001058  0E14               	movlw	20
  1833  00105A  0100               	movlb	0	; () banked
  1834  00105C  5D8B               	subwf	LCD_WriteChar@i& (0+255),w,b
  1835  00105E  B0D8               	btfsc	status,0,c
  1836  001060  D016               	goto	l1835
  1837  001062                     l1829:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;LCD.c: 169: {
  1841                           ;LCD.c: 170: DataLine2[i] = DataLine3[i];
  1842  001062  0E16               	movlw	low _DataLine3
  1843  001064  0100               	movlb	0	; () banked
  1844  001066  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1845  001068  6ED9               	movwf	fsr2l,c
  1846  00106A  0E00               	movlw	high _DataLine3
  1847  00106C  0100               	movlb	0	; () banked
  1848  00106E  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1849  001070  6EDA               	movwf	fsr2h,c
  1850  001072  0E01               	movlw	low _DataLine2
  1851  001074  0100               	movlb	0	; () banked
  1852  001076  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1853  001078  6EE1               	movwf	fsr1l,c
  1854  00107A  0E00               	movlw	high _DataLine2
  1855  00107C  0100               	movlb	0	; () banked
  1856  00107E  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1857  001080  6EE2               	movwf	fsr1h,c
  1858  001082  CFDF FFE7          	movff	indf2,indf1
  1859                           
  1860                           ; BSR set to: 0
  1861  001086  0100               	movlb	0	; () banked
  1862  001088  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  1863  00108A  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  1864  00108C  D7DF               	goto	l1825
  1865  00108E                     l1835:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;LCD.c: 171: }
  1869                           ;LCD.c: 172: for(i=0;i<20;i++)
  1870  00108E  0E00               	movlw	0
  1871  001090  0100               	movlb	0	; () banked
  1872  001092  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  1873  001094  0E00               	movlw	0
  1874  001096  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  1875  001098                     l1837:
  1876                           
  1877                           ; BSR set to: 0
  1878  001098  0100               	movlb	0	; () banked
  1879  00109A  BF8C               	btfsc	(LCD_WriteChar@i+1)& (0+255),7,b
  1880  00109C  D008               	goto	l1841
  1881  00109E  0100               	movlb	0	; () banked
  1882  0010A0  518C               	movf	(LCD_WriteChar@i+1)& (0+255),w,b
  1883  0010A2  E11B               	bnz	l1847
  1884  0010A4  0E14               	movlw	20
  1885  0010A6  0100               	movlb	0	; () banked
  1886  0010A8  5D8B               	subwf	LCD_WriteChar@i& (0+255),w,b
  1887  0010AA  B0D8               	btfsc	status,0,c
  1888  0010AC  D016               	goto	l1847
  1889  0010AE                     l1841:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;LCD.c: 173: {
  1893                           ;LCD.c: 174: DataLine3[i] = DataLine4[i];
  1894  0010AE  0E75               	movlw	low _DataLine4
  1895  0010B0  0100               	movlb	0	; () banked
  1896  0010B2  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1897  0010B4  6ED9               	movwf	fsr2l,c
  1898  0010B6  0E00               	movlw	high _DataLine4
  1899  0010B8  0100               	movlb	0	; () banked
  1900  0010BA  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1901  0010BC  6EDA               	movwf	fsr2h,c
  1902  0010BE  0E16               	movlw	low _DataLine3
  1903  0010C0  0100               	movlb	0	; () banked
  1904  0010C2  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1905  0010C4  6EE1               	movwf	fsr1l,c
  1906  0010C6  0E00               	movlw	high _DataLine3
  1907  0010C8  0100               	movlb	0	; () banked
  1908  0010CA  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1909  0010CC  6EE2               	movwf	fsr1h,c
  1910  0010CE  CFDF FFE7          	movff	indf2,indf1
  1911                           
  1912                           ; BSR set to: 0
  1913  0010D2  0100               	movlb	0	; () banked
  1914  0010D4  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  1915  0010D6  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  1916  0010D8  D7DF               	goto	l1837
  1917  0010DA                     l1847:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;LCD.c: 175: }
  1921                           ;LCD.c: 178: LCD_SelectLine(1);
  1922  0010DA  0E01               	movlw	1
  1923  0010DC  ECC0  F00B         	call	_LCD_SelectLine
  1924                           
  1925                           ;LCD.c: 179: i = 0;
  1926  0010E0  0E00               	movlw	0
  1927  0010E2  0100               	movlb	0	; () banked
  1928  0010E4  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  1929  0010E6  0E00               	movlw	0
  1930  0010E8  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  1931                           
  1932                           ;LCD.c: 180: while(DataLine1[i] != '\0')
  1933  0010EA  D010               	goto	l1855
  1934  0010EC                     l1851:
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;LCD.c: 181: {
  1938                           ;LCD.c: 182: WriteLCD(1,DataLine1[i]);
  1939  0010EC  0E60               	movlw	low _DataLine1
  1940  0010EE  0100               	movlb	0	; () banked
  1941  0010F0  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1942  0010F2  6ED9               	movwf	fsr2l,c
  1943  0010F4  0E00               	movlw	high _DataLine1
  1944  0010F6  0100               	movlb	0	; () banked
  1945  0010F8  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1946  0010FA  6EDA               	movwf	fsr2h,c
  1947  0010FC  50DF               	movf	indf2,w,c
  1948  0010FE  6E43               	movwf	WriteLCD@data,c
  1949  001100  0E01               	movlw	1
  1950  001102  EC48  F00B         	call	_WriteLCD
  1951                           
  1952                           ;LCD.c: 183: i++;
  1953  001106  0100               	movlb	0	; () banked
  1954  001108  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  1955  00110A  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  1956  00110C                     l1855:
  1957                           
  1958                           ; BSR set to: 0
  1959  00110C  0E60               	movlw	low _DataLine1
  1960  00110E  0100               	movlb	0	; () banked
  1961  001110  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1962  001112  6ED9               	movwf	fsr2l,c
  1963  001114  0E00               	movlw	high _DataLine1
  1964  001116  0100               	movlb	0	; () banked
  1965  001118  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  1966  00111A  6EDA               	movwf	fsr2h,c
  1967  00111C  50DF               	movf	indf2,w,c
  1968  00111E  A4D8               	btfss	status,2,c
  1969  001120  D7E5               	goto	l1851
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;LCD.c: 184: }
  1973                           ;LCD.c: 185: LCD_SelectLine(2);
  1974                           
  1975                           ; BSR set to: 0
  1976  001122  0E02               	movlw	2
  1977  001124  ECC0  F00B         	call	_LCD_SelectLine
  1978                           
  1979                           ;LCD.c: 186: i = 0;
  1980  001128  0E00               	movlw	0
  1981  00112A  0100               	movlb	0	; () banked
  1982  00112C  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  1983  00112E  0E00               	movlw	0
  1984  001130  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  1985                           
  1986                           ;LCD.c: 187: while(DataLine2[i] != '\0')
  1987  001132  D010               	goto	l1865
  1988  001134                     l1861:
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;LCD.c: 188: {
  1992                           ;LCD.c: 189: WriteLCD(1,DataLine2[i]);
  1993  001134  0E01               	movlw	low _DataLine2
  1994  001136  0100               	movlb	0	; () banked
  1995  001138  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  1996  00113A  6ED9               	movwf	fsr2l,c
  1997  00113C  0E00               	movlw	high _DataLine2
  1998  00113E  0100               	movlb	0	; () banked
  1999  001140  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  2000  001142  6EDA               	movwf	fsr2h,c
  2001  001144  50DF               	movf	indf2,w,c
  2002  001146  6E43               	movwf	WriteLCD@data,c
  2003  001148  0E01               	movlw	1
  2004  00114A  EC48  F00B         	call	_WriteLCD
  2005                           
  2006                           ;LCD.c: 190: i++;
  2007  00114E  0100               	movlb	0	; () banked
  2008  001150  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  2009  001152  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  2010  001154                     l1865:
  2011                           
  2012                           ; BSR set to: 0
  2013  001154  0E01               	movlw	low _DataLine2
  2014  001156  0100               	movlb	0	; () banked
  2015  001158  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  2016  00115A  6ED9               	movwf	fsr2l,c
  2017  00115C  0E00               	movlw	high _DataLine2
  2018  00115E  0100               	movlb	0	; () banked
  2019  001160  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  2020  001162  6EDA               	movwf	fsr2h,c
  2021  001164  50DF               	movf	indf2,w,c
  2022  001166  A4D8               	btfss	status,2,c
  2023  001168  D7E5               	goto	l1861
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;LCD.c: 191: }
  2027                           ;LCD.c: 192: LCD_SelectLine(3);
  2028                           
  2029                           ; BSR set to: 0
  2030  00116A  0E03               	movlw	3
  2031  00116C  ECC0  F00B         	call	_LCD_SelectLine
  2032                           
  2033                           ;LCD.c: 193: i = 0;
  2034  001170  0E00               	movlw	0
  2035  001172  0100               	movlb	0	; () banked
  2036  001174  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  2037  001176  0E00               	movlw	0
  2038  001178  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  2039                           
  2040                           ;LCD.c: 194: while(DataLine3[i] != '\0')
  2041  00117A  D010               	goto	l1875
  2042  00117C                     l1871:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;LCD.c: 195: {
  2046                           ;LCD.c: 196: WriteLCD(1,DataLine3[i]);
  2047  00117C  0E16               	movlw	low _DataLine3
  2048  00117E  0100               	movlb	0	; () banked
  2049  001180  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  2050  001182  6ED9               	movwf	fsr2l,c
  2051  001184  0E00               	movlw	high _DataLine3
  2052  001186  0100               	movlb	0	; () banked
  2053  001188  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  2054  00118A  6EDA               	movwf	fsr2h,c
  2055  00118C  50DF               	movf	indf2,w,c
  2056  00118E  6E43               	movwf	WriteLCD@data,c
  2057  001190  0E01               	movlw	1
  2058  001192  EC48  F00B         	call	_WriteLCD
  2059                           
  2060                           ;LCD.c: 197: i++;
  2061  001196  0100               	movlb	0	; () banked
  2062  001198  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  2063  00119A  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  2064  00119C                     l1875:
  2065                           
  2066                           ; BSR set to: 0
  2067  00119C  0E16               	movlw	low _DataLine3
  2068  00119E  0100               	movlb	0	; () banked
  2069  0011A0  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  2070  0011A2  6ED9               	movwf	fsr2l,c
  2071  0011A4  0E00               	movlw	high _DataLine3
  2072  0011A6  0100               	movlb	0	; () banked
  2073  0011A8  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  2074  0011AA  6EDA               	movwf	fsr2h,c
  2075  0011AC  50DF               	movf	indf2,w,c
  2076  0011AE  A4D8               	btfss	status,2,c
  2077  0011B0  D7E5               	goto	l1871
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;LCD.c: 198: }
  2081                           ;LCD.c: 199: LCD_SelectLine(4);
  2082                           
  2083                           ; BSR set to: 0
  2084  0011B2  0E04               	movlw	4
  2085  0011B4  ECC0  F00B         	call	_LCD_SelectLine
  2086                           
  2087                           ;LCD.c: 202: for(i=0;i<20;i++)
  2088  0011B8  0E00               	movlw	0
  2089  0011BA  0100               	movlb	0	; () banked
  2090  0011BC  6F8C               	movwf	(LCD_WriteChar@i+1)& (0+255),b
  2091  0011BE  0E00               	movlw	0
  2092  0011C0  6F8B               	movwf	LCD_WriteChar@i& (0+255),b
  2093  0011C2                     l1881:
  2094                           
  2095                           ; BSR set to: 0
  2096  0011C2  0100               	movlb	0	; () banked
  2097  0011C4  BF8C               	btfsc	(LCD_WriteChar@i+1)& (0+255),7,b
  2098  0011C6  D008               	goto	l1885
  2099  0011C8  0100               	movlb	0	; () banked
  2100  0011CA  518C               	movf	(LCD_WriteChar@i+1)& (0+255),w,b
  2101  0011CC  E113               	bnz	l1891
  2102  0011CE  0E14               	movlw	20
  2103  0011D0  0100               	movlb	0	; () banked
  2104  0011D2  5D8B               	subwf	LCD_WriteChar@i& (0+255),w,b
  2105  0011D4  B0D8               	btfsc	status,0,c
  2106  0011D6  D00E               	goto	l1891
  2107  0011D8                     l1885:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;LCD.c: 203: {
  2111                           ;LCD.c: 204: DataLine4[i] = '\0';
  2112  0011D8  0E75               	movlw	low _DataLine4
  2113  0011DA  0100               	movlb	0	; () banked
  2114  0011DC  258B               	addwf	LCD_WriteChar@i& (0+255),w,b
  2115  0011DE  6ED9               	movwf	fsr2l,c
  2116  0011E0  0E00               	movlw	high _DataLine4
  2117  0011E2  0100               	movlb	0	; () banked
  2118  0011E4  218C               	addwfc	(LCD_WriteChar@i+1)& (0+255),w,b
  2119  0011E6  6EDA               	movwf	fsr2h,c
  2120  0011E8  0E00               	movlw	0
  2121  0011EA  6EDF               	movwf	indf2,c
  2122                           
  2123                           ; BSR set to: 0
  2124  0011EC  0100               	movlb	0	; () banked
  2125  0011EE  4B8B               	infsnz	LCD_WriteChar@i& (0+255),f,b
  2126  0011F0  2B8C               	incf	(LCD_WriteChar@i+1)& (0+255),f,b
  2127  0011F2  D7E7               	goto	l1881
  2128  0011F4                     l1891:
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;LCD.c: 205: }
  2132                           ;LCD.c: 208: if(data != '\n')
  2133  0011F4  0E0A               	movlw	10
  2134  0011F6  0100               	movlb	0	; () banked
  2135  0011F8  198A               	xorwf	LCD_WriteChar@data& (0+255),w,b
  2136  0011FA  A4D8               	btfss	status,2,c
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;LCD.c: 209: {
  2140                           ;LCD.c: 210: DataLine4[0] = data;
  2141  0011FC  C08A  F075         	movff	LCD_WriteChar@data,_DataLine4
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;LCD.c: 211: }
  2145                           ;LCD.c: 212: DataPosition = 60;
  2146                           
  2147                           ; BSR set to: 0
  2148  001200  0E3C               	movlw	60
  2149  001202  6E2D               	movwf	_DataPosition,c
  2150  001204                     l1897:
  2151                           
  2152                           ;LCD.c: 213: }
  2153                           ;LCD.c: 216: if(data != '\n')
  2154  001204  0E0A               	movlw	10
  2155  001206  0100               	movlb	0	; () banked
  2156  001208  198A               	xorwf	LCD_WriteChar@data& (0+255),w,b
  2157  00120A  B4D8               	btfsc	status,2,c
  2158  00120C  0012               	return	
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;LCD.c: 217: {
  2162                           ;LCD.c: 218: WriteLCD(1,data);
  2163  00120E  C08A  F043         	movff	LCD_WriteChar@data,WriteLCD@data
  2164  001212  0E01               	movlw	1
  2165  001214  EC48  F00B         	call	_WriteLCD
  2166                           
  2167                           ;LCD.c: 219: DataPosition++;
  2168  001218  2A2D               	incf	_DataPosition,f,c
  2169  00121A  0012               	return	
  2170  00121C                     __end_of_LCD_WriteChar:
  2171                           	opt stack 0
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           postinc0	equ	0xFEE
  2179                           wreg	equ	0xFE8
  2180                           indf1	equ	0xFE7
  2181                           fsr1h	equ	0xFE2
  2182                           fsr1l	equ	0xFE1
  2183                           indf2	equ	0xFDF
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _LCD_SelectLine *****************
  2189 ;; Defined at:
  2190 ;;		line 233 in file "LCD.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  line            1    wreg     unsigned char 
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  line            1   23[COMRAM] unsigned char 
  2195 ;;  data            1   24[COMRAM] unsigned char 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;Total ram usage:        2 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    3
  2212 ;; This function calls:
  2213 ;;		_WriteLCD
  2214 ;; This function is called by:
  2215 ;;		_LCD_WriteChar
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text7
  2220  001780                     __ptext7:
  2221                           	opt stack 0
  2222  001780                     _LCD_SelectLine:
  2223                           	opt stack 25
  2224                           
  2225                           ;incstack = 0
  2226                           ;LCD_SelectLine@line stored from wreg
  2227  001780  6E4A               	movwf	LCD_SelectLine@line,c
  2228                           
  2229                           ;LCD.c: 235: char data;
  2230                           ;LCD.c: 237: switch (line)
  2231  001782  D009               	goto	l1763
  2232  001784                     l1753:
  2233                           
  2234                           ;LCD.c: 240: data = 0x80;
  2235  001784  0E80               	movlw	128
  2236  001786  D005               	goto	L9
  2237  001788                     l1755:
  2238                           
  2239                           ;LCD.c: 243: data = 0xA0;
  2240  001788  0EA0               	movlw	160
  2241  00178A  D003               	goto	L9
  2242  00178C                     l1757:
  2243                           
  2244                           ;LCD.c: 246: data = 0xC0;
  2245  00178C  0EC0               	movlw	192
  2246  00178E  D001               	goto	L9
  2247  001790                     l1759:
  2248                           
  2249                           ;LCD.c: 249: data = 0xE0;
  2250  001790  0EE0               	movlw	224
  2251  001792                     L9:
  2252  001792  6E4B               	movwf	LCD_SelectLine@data,c
  2253                           
  2254                           ;LCD.c: 250: break;
  2255  001794  D00E               	goto	l1765
  2256  001796                     l1763:
  2257  001796  504A               	movf	LCD_SelectLine@line,w,c
  2258                           
  2259                           ; Switch size 1, requested type "space"
  2260                           ; Number of cases is 4, Range of values is 1 to 4
  2261                           ; switch strategies available:
  2262                           ; Name         Instructions Cycles
  2263                           ; simple_byte           13     7 (average)
  2264                           ;	Chosen strategy is simple_byte
  2265  001798  0A01               	xorlw	1	; case 1
  2266  00179A  B4D8               	btfsc	status,2,c
  2267  00179C  D7F3               	goto	l1753
  2268  00179E  0A03               	xorlw	3	; case 2
  2269  0017A0  B4D8               	btfsc	status,2,c
  2270  0017A2  D7F2               	goto	l1755
  2271  0017A4  0A01               	xorlw	1	; case 3
  2272  0017A6  B4D8               	btfsc	status,2,c
  2273  0017A8  D7F1               	goto	l1757
  2274  0017AA  0A07               	xorlw	7	; case 4
  2275  0017AC  A4D8               	btfss	status,2,c
  2276  0017AE  0012               	return	
  2277  0017B0  D7EF               	goto	l1759
  2278  0017B2                     l1765:
  2279                           
  2280                           ;LCD.c: 255: WriteLCD(0,data);
  2281  0017B2  C04B  F043         	movff	LCD_SelectLine@data,WriteLCD@data
  2282  0017B6  0E00               	movlw	0
  2283  0017B8  EC48  F00B         	call	_WriteLCD
  2284  0017BC  0012               	return		;funcret
  2285  0017BE                     __end_of_LCD_SelectLine:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           indf1	equ	0xFE7
  2296                           fsr1h	equ	0xFE2
  2297                           fsr1l	equ	0xFE1
  2298                           indf2	equ	0xFDF
  2299                           fsr2h	equ	0xFDA
  2300                           fsr2l	equ	0xFD9
  2301                           status	equ	0xFD8
  2302                           
  2303 ;; *************** function _LCD_Clear *****************
  2304 ;; Defined at:
  2305 ;;		line 80 in file "LCD.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;		None
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  i               2   23[COMRAM] int 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;Total ram usage:        2 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    3
  2326 ;; This function calls:
  2327 ;;		_WriteLCD
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text8
  2334  001712                     __ptext8:
  2335                           	opt stack 0
  2336  001712                     _LCD_Clear:
  2337                           	opt stack 27
  2338                           
  2339                           ;LCD.c: 82: WriteLCD(0,0x01);
  2340                           
  2341                           ;incstack = 0
  2342  001712  0E01               	movlw	1
  2343  001714  6E43               	movwf	WriteLCD@data,c
  2344  001716  0E00               	movlw	0
  2345  001718  EC48  F00B         	call	_WriteLCD
  2346                           
  2347                           ;LCD.c: 84: DataPosition = 0;
  2348  00171C  0E00               	movlw	0
  2349  00171E  6E2D               	movwf	_DataPosition,c
  2350                           
  2351                           ;LCD.c: 86: int i;
  2352                           ;LCD.c: 87: for(i=0;i<20;i++)
  2353  001720  0E00               	movlw	0
  2354  001722  6E4B               	movwf	LCD_Clear@i+1,c
  2355  001724  0E00               	movlw	0
  2356  001726  6E4A               	movwf	LCD_Clear@i,c
  2357  001728                     l1921:
  2358  001728  BE4B               	btfsc	LCD_Clear@i+1,7,c
  2359  00172A  D006               	goto	l1925
  2360  00172C  504B               	movf	LCD_Clear@i+1,w,c
  2361  00172E  E127               	bnz	l125
  2362  001730  0E14               	movlw	20
  2363  001732  5C4A               	subwf	LCD_Clear@i,w,c
  2364  001734  B0D8               	btfsc	status,0,c
  2365  001736  0012               	return	
  2366  001738                     l1925:
  2367                           
  2368                           ;LCD.c: 88: {
  2369                           ;LCD.c: 89: DataLine1[i] = '\0';
  2370  001738  0E60               	movlw	low _DataLine1
  2371  00173A  244A               	addwf	LCD_Clear@i,w,c
  2372  00173C  6ED9               	movwf	fsr2l,c
  2373  00173E  0E00               	movlw	high _DataLine1
  2374  001740  204B               	addwfc	LCD_Clear@i+1,w,c
  2375  001742  6EDA               	movwf	fsr2h,c
  2376  001744  0E00               	movlw	0
  2377  001746  6EDF               	movwf	indf2,c
  2378                           
  2379                           ;LCD.c: 90: DataLine2[i] = '\0';
  2380  001748  0E01               	movlw	low _DataLine2
  2381  00174A  244A               	addwf	LCD_Clear@i,w,c
  2382  00174C  6ED9               	movwf	fsr2l,c
  2383  00174E  0E00               	movlw	high _DataLine2
  2384  001750  204B               	addwfc	LCD_Clear@i+1,w,c
  2385  001752  6EDA               	movwf	fsr2h,c
  2386  001754  0E00               	movlw	0
  2387  001756  6EDF               	movwf	indf2,c
  2388                           
  2389                           ;LCD.c: 91: DataLine3[i] = '\0';
  2390  001758  0E16               	movlw	low _DataLine3
  2391  00175A  244A               	addwf	LCD_Clear@i,w,c
  2392  00175C  6ED9               	movwf	fsr2l,c
  2393  00175E  0E00               	movlw	high _DataLine3
  2394  001760  204B               	addwfc	LCD_Clear@i+1,w,c
  2395  001762  6EDA               	movwf	fsr2h,c
  2396  001764  0E00               	movlw	0
  2397  001766  6EDF               	movwf	indf2,c
  2398                           
  2399                           ;LCD.c: 92: DataLine4[i] = '\0';
  2400  001768  0E75               	movlw	low _DataLine4
  2401  00176A  244A               	addwf	LCD_Clear@i,w,c
  2402  00176C  6ED9               	movwf	fsr2l,c
  2403  00176E  0E00               	movlw	high _DataLine4
  2404  001770  204B               	addwfc	LCD_Clear@i+1,w,c
  2405  001772  6EDA               	movwf	fsr2h,c
  2406  001774  0E00               	movlw	0
  2407  001776  6EDF               	movwf	indf2,c
  2408  001778  4A4A               	infsnz	LCD_Clear@i,f,c
  2409  00177A  2A4B               	incf	LCD_Clear@i+1,f,c
  2410  00177C  D7D5               	goto	l1921
  2411  00177E                     l125:
  2412  00177E  0012               	return		;funcret
  2413  001780                     __end_of_LCD_Clear:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           prodh	equ	0xFF4
  2420                           prodl	equ	0xFF3
  2421                           postinc0	equ	0xFEE
  2422                           wreg	equ	0xFE8
  2423                           indf1	equ	0xFE7
  2424                           fsr1h	equ	0xFE2
  2425                           fsr1l	equ	0xFE1
  2426                           indf2	equ	0xFDF
  2427                           fsr2h	equ	0xFDA
  2428                           fsr2l	equ	0xFD9
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _WriteLCD *****************
  2432 ;; Defined at:
  2433 ;;		line 42 in file "LCD.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  RS              1    wreg     unsigned char 
  2436 ;;  data            1   16[COMRAM] unsigned char 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  RS              1   19[COMRAM] unsigned char 
  2439 ;;  StartByte       1   22[COMRAM] unsigned char 
  2440 ;;  UpperData       1   21[COMRAM] unsigned char 
  2441 ;;  LowerData       1   20[COMRAM] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2451 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2452 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2455 ;;Total ram usage:        7 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    2
  2458 ;; This function calls:
  2459 ;;		_WriteSPI2
  2460 ;; This function is called by:
  2461 ;;		_LCD_init
  2462 ;;		_LCD_Clear
  2463 ;;		_LCD_WriteChar
  2464 ;;		_LCD_SelectLine
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text9
  2469  001690                     __ptext9:
  2470                           	opt stack 0
  2471  001690                     _WriteLCD:
  2472                           	opt stack 27
  2473                           
  2474                           ;incstack = 0
  2475                           ;WriteLCD@RS stored from wreg
  2476  001690  6E46               	movwf	WriteLCD@RS,c
  2477                           
  2478                           ;LCD.c: 45: char StartByte;
  2479                           ;LCD.c: 46: if (RS == 0)
  2480  001692  5046               	movf	WriteLCD@RS,w,c
  2481  001694  A4D8               	btfss	status,2,c
  2482  001696  D002               	goto	l1729
  2483                           
  2484                           ;LCD.c: 47: StartByte = 0xF8;
  2485  001698  0EF8               	movlw	248
  2486  00169A  D001               	goto	L10
  2487  00169C                     l1729:
  2488                           
  2489                           ;LCD.c: 48: else
  2490                           ;LCD.c: 49: StartByte = 0xFA;
  2491  00169C  0EFA               	movlw	250
  2492  00169E                     L10:
  2493  00169E  6E49               	movwf	WriteLCD@StartByte,c
  2494                           
  2495                           ;LCD.c: 52: data = (data & 0xF0) >> 4 | (data & 0x0F) << 4;
  2496  0016A0  C043  F044         	movff	WriteLCD@data,??_WriteLCD
  2497  0016A4  0E0F               	movlw	15
  2498  0016A6  1644               	andwf	??_WriteLCD,f,c
  2499  0016A8  3A44               	swapf	??_WriteLCD,f,c
  2500  0016AA  0EF0               	movlw	240
  2501  0016AC  1644               	andwf	??_WriteLCD,f,c
  2502  0016AE  3843               	swapf	WriteLCD@data,w,c
  2503  0016B0  0B0F               	andlw	15
  2504  0016B2  0B0F               	andlw	15
  2505  0016B4  1044               	iorwf	??_WriteLCD,w,c
  2506  0016B6  6E43               	movwf	WriteLCD@data,c
  2507                           
  2508                           ;LCD.c: 53: data = (data & 0xCC) >> 2 | (data & 0x33) << 2;
  2509  0016B8  C043  F044         	movff	WriteLCD@data,??_WriteLCD
  2510  0016BC  0E33               	movlw	51
  2511  0016BE  1644               	andwf	??_WriteLCD,f,c
  2512  0016C0  90D8               	bcf	status,0,c
  2513  0016C2  3644               	rlcf	??_WriteLCD,f,c
  2514  0016C4  90D8               	bcf	status,0,c
  2515  0016C6  3644               	rlcf	??_WriteLCD,f,c
  2516  0016C8  4043               	rrncf	WriteLCD@data,w,c
  2517  0016CA  42E8               	rrncf	wreg,f,c
  2518  0016CC  0B3F               	andlw	63
  2519  0016CE  0B33               	andlw	51
  2520  0016D0  1044               	iorwf	??_WriteLCD,w,c
  2521  0016D2  6E43               	movwf	WriteLCD@data,c
  2522                           
  2523                           ;LCD.c: 54: data = (data & 0xAA) >> 1 | (data & 0x55) << 1;
  2524  0016D4  C043  F044         	movff	WriteLCD@data,??_WriteLCD
  2525  0016D8  0E55               	movlw	85
  2526  0016DA  1644               	andwf	??_WriteLCD,f,c
  2527  0016DC  90D8               	bcf	status,0,c
  2528  0016DE  3444               	rlcf	??_WriteLCD,w,c
  2529  0016E0  6E45               	movwf	(??_WriteLCD+1)& (0+255),c
  2530  0016E2  90D8               	bcf	status,0,c
  2531  0016E4  3043               	rrcf	WriteLCD@data,w,c
  2532  0016E6  0B55               	andlw	85
  2533  0016E8  1045               	iorwf	??_WriteLCD+1,w,c
  2534  0016EA  6E43               	movwf	WriteLCD@data,c
  2535                           
  2536                           ;LCD.c: 57: char LowerData = data & 0xF0;
  2537  0016EC  5043               	movf	WriteLCD@data,w,c
  2538  0016EE  0BF0               	andlw	240
  2539  0016F0  6E47               	movwf	WriteLCD@LowerData,c
  2540                           
  2541                           ;LCD.c: 60: char UpperData = (data<<4) & 0xF0;
  2542  0016F2  3843               	swapf	WriteLCD@data,w,c
  2543  0016F4  0BF0               	andlw	240
  2544  0016F6  0BF0               	andlw	240
  2545  0016F8  6E48               	movwf	WriteLCD@UpperData,c
  2546                           
  2547                           ;LCD.c: 62: PORTDbits.RD3 = 0;
  2548  0016FA  9683               	bcf	3971,3,c	;volatile
  2549                           
  2550                           ;LCD.c: 63: WriteSPI2(StartByte);
  2551  0016FC  5049               	movf	WriteLCD@StartByte,w,c
  2552  0016FE  EC39  F00C         	call	_WriteSPI2
  2553                           
  2554                           ;LCD.c: 64: WriteSPI2(LowerData);
  2555  001702  5047               	movf	WriteLCD@LowerData,w,c
  2556  001704  EC39  F00C         	call	_WriteSPI2
  2557                           
  2558                           ;LCD.c: 65: WriteSPI2(UpperData);
  2559  001708  5048               	movf	WriteLCD@UpperData,w,c
  2560  00170A  EC39  F00C         	call	_WriteSPI2
  2561                           
  2562                           ;LCD.c: 66: PORTDbits.RD3 = 1;
  2563  00170E  8683               	bsf	3971,3,c	;volatile
  2564  001710  0012               	return		;funcret
  2565  001712                     __end_of_WriteLCD:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           indf1	equ	0xFE7
  2576                           fsr1h	equ	0xFE2
  2577                           fsr1l	equ	0xFE1
  2578                           indf2	equ	0xFDF
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _WriteSPI2 *****************
  2584 ;; Defined at:
  2585 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\SPI\spi2writ.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  data_out        1    wreg     unsigned char 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  data_out        1   15[COMRAM] unsigned char 
  2590 ;;  TempVar         1   14[COMRAM] unsigned char 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      char 
  2593 ;; Registers used:
  2594 ;;		wreg
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2604 ;;Total ram usage:        2 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    1
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_WriteLCD
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text10
  2615  001872                     __ptext10:
  2616                           	opt stack 0
  2617  001872                     _WriteSPI2:
  2618                           	opt stack 27
  2619                           
  2620                           ;incstack = 0
  2621                           ;WriteSPI2@data_out stored from wreg
  2622  001872  6E42               	movwf	WriteSPI2@data_out,c
  2623  001874  CF03 F041          	movff	3843,WriteSPI2@TempVar	;volatile
  2624  001878  9CA1               	bcf	4001,6,c	;volatile
  2625  00187A  C042  FF03         	movff	WriteSPI2@data_out,3843	;volatile
  2626  00187E  010F               	movlb	15	; () banked
  2627  001880  BF19               	btfsc	25,7,b	;volatile
  2628  001882  0012               	return	
  2629  001884                     l283:
  2630  001884  BCA1               	btfsc	4001,6,c	;volatile
  2631  001886  0012               	return	
  2632  001888  D7FD               	goto	l283
  2633  00188A                     __end_of_WriteSPI2:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           tblptrh	equ	0xFF7
  2637                           tblptrl	equ	0xFF6
  2638                           tablat	equ	0xFF5
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           postinc0	equ	0xFEE
  2642                           wreg	equ	0xFE8
  2643                           indf1	equ	0xFE7
  2644                           fsr1h	equ	0xFE2
  2645                           fsr1l	equ	0xFE1
  2646                           indf2	equ	0xFDF
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _Keyboard_init *****************
  2652 ;; Defined at:
  2653 ;;		line 14 in file "Keyboard.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		None
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2671 ;;Total ram usage:        0 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    1
  2674 ;; This function calls:
  2675 ;;		Nothing
  2676 ;; This function is called by:
  2677 ;;		_main
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text11
  2682  00188A                     __ptext11:
  2683                           	opt stack 0
  2684  00188A                     _Keyboard_init:
  2685                           	opt stack 29
  2686                           
  2687                           ;Keyboard.c: 16: TRISEbits.TRISE0 = 0;
  2688                           
  2689                           ;incstack = 0
  2690  00188A  9096               	bcf	3990,0,c	;volatile
  2691                           
  2692                           ;Keyboard.c: 17: TRISEbits.TRISE1 = 0;
  2693  00188C  9296               	bcf	3990,1,c	;volatile
  2694                           
  2695                           ;Keyboard.c: 18: TRISEbits.TRISE2 = 0;
  2696  00188E  9496               	bcf	3990,2,c	;volatile
  2697                           
  2698                           ;Keyboard.c: 19: TRISEbits.TRISE3 = 0;
  2699  001890  9696               	bcf	3990,3,c	;volatile
  2700                           
  2701                           ;Keyboard.c: 20: TRISEbits.TRISE4 = 1;
  2702  001892  8896               	bsf	3990,4,c	;volatile
  2703                           
  2704                           ;Keyboard.c: 21: TRISEbits.TRISE5 = 1;
  2705  001894  8A96               	bsf	3990,5,c	;volatile
  2706                           
  2707                           ;Keyboard.c: 22: TRISEbits.TRISE6 = 1;
  2708  001896  8C96               	bsf	3990,6,c	;volatile
  2709                           
  2710                           ;Keyboard.c: 23: TRISEbits.TRISE7 = 1;
  2711  001898  8E96               	bsf	3990,7,c	;volatile
  2712  00189A  0012               	return		;funcret
  2713  00189C                     __end_of_Keyboard_init:
  2714                           	opt stack 0
  2715                           tblptru	equ	0xFF8
  2716                           tblptrh	equ	0xFF7
  2717                           tblptrl	equ	0xFF6
  2718                           tablat	equ	0xFF5
  2719                           prodh	equ	0xFF4
  2720                           prodl	equ	0xFF3
  2721                           postinc0	equ	0xFEE
  2722                           wreg	equ	0xFE8
  2723                           indf1	equ	0xFE7
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _Keyboard_Read *****************
  2732 ;; Defined at:
  2733 ;;		line 26 in file "Keyboard.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  i               2   14[COMRAM] int 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, status,0
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2751 ;;Total ram usage:        2 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    1
  2754 ;; This function calls:
  2755 ;;		Nothing
  2756 ;; This function is called by:
  2757 ;;		_main
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text12
  2762  0014B4                     __ptext12:
  2763                           	opt stack 0
  2764  0014B4                     _Keyboard_Read:
  2765                           	opt stack 29
  2766                           
  2767                           ;Keyboard.c: 28: int i;
  2768                           ;Keyboard.c: 30: PORTE = 0x00;
  2769                           
  2770                           ;incstack = 0
  2771  0014B4  0E00               	movlw	0
  2772  0014B6  6E84               	movwf	3972,c	;volatile
  2773                           
  2774                           ;Keyboard.c: 33: if(PORTE == 0xF0)
  2775  0014B8  0EF0               	movlw	240
  2776  0014BA  1884               	xorwf	3972,w,c	;volatile
  2777  0014BC  A4D8               	btfss	status,2,c
  2778  0014BE  D00E               	goto	l1155
  2779                           
  2780                           ;Keyboard.c: 34: {
  2781                           ;Keyboard.c: 35: if(debounce > 10000)
  2782  0014C0  BE2C               	btfsc	_debounce+1,7,c
  2783  0014C2  D009               	goto	l1153
  2784  0014C4  0E11               	movlw	17
  2785  0014C6  5C2B               	subwf	_debounce,w,c
  2786  0014C8  0E27               	movlw	39
  2787  0014CA  582C               	subwfb	_debounce+1,w,c
  2788  0014CC  A0D8               	btfss	status,0,c
  2789  0014CE  D003               	goto	l1153
  2790                           
  2791                           ;Keyboard.c: 36: {
  2792                           ;Keyboard.c: 37: Keyboard_Ready = 1;
  2793  0014D0  0E01               	movlw	1
  2794  0014D2  6E30               	movwf	_Keyboard_Ready,c
  2795  0014D4  D003               	goto	l1155
  2796  0014D6                     l1153:
  2797                           
  2798                           ;Keyboard.c: 40: else
  2799                           ;Keyboard.c: 41: {
  2800                           ;Keyboard.c: 42: debounce++;
  2801  0014D6  4A2B               	infsnz	_debounce,f,c
  2802  0014D8  2A2C               	incf	_debounce+1,f,c
  2803                           
  2804                           ;Keyboard.c: 43: }
  2805                           ;Keyboard.c: 45: }
  2806  0014DA  D004               	goto	l1157
  2807  0014DC                     l1155:
  2808                           
  2809                           ;Keyboard.c: 46: else
  2810                           ;Keyboard.c: 47: {
  2811                           ;Keyboard.c: 48: debounce = 0;
  2812  0014DC  0E00               	movlw	0
  2813  0014DE  6E2C               	movwf	_debounce+1,c
  2814  0014E0  0E00               	movlw	0
  2815  0014E2  6E2B               	movwf	_debounce,c
  2816  0014E4                     l1157:
  2817                           
  2818                           ;Keyboard.c: 49: }
  2819                           ;Keyboard.c: 52: if(PORTE != 0xF0 && Keyboard_Ready)
  2820  0014E4  0EF0               	movlw	240
  2821  0014E6  1884               	xorwf	3972,w,c	;volatile
  2822  0014E8  B4D8               	btfsc	status,2,c
  2823  0014EA  0012               	return	
  2824  0014EC  5030               	movf	_Keyboard_Ready,w,c
  2825  0014EE  B4D8               	btfsc	status,2,c
  2826  0014F0  0012               	return	
  2827                           
  2828                           ;Keyboard.c: 53: {
  2829                           ;Keyboard.c: 54: Keyboard_Ready = 0;
  2830  0014F2  0E00               	movlw	0
  2831  0014F4  6E30               	movwf	_Keyboard_Ready,c
  2832                           
  2833                           ;Keyboard.c: 55: Keyboard_NewData = 1;
  2834  0014F6  0E01               	movlw	1
  2835  0014F8  6E2F               	movwf	_Keyboard_NewData,c
  2836                           
  2837                           ;Keyboard.c: 57: PORTE = 0x0E;
  2838  0014FA  0E0E               	movlw	14
  2839  0014FC  6E84               	movwf	3972,c	;volatile
  2840                           
  2841                           ;Keyboard.c: 58: for(i=0;i<1000;i++);
  2842  0014FE  0E00               	movlw	0
  2843  001500  6E42               	movwf	Keyboard_Read@i+1,c
  2844  001502  0E00               	movlw	0
  2845  001504  6E41               	movwf	Keyboard_Read@i,c
  2846  001506                     l1163:
  2847  001506  BE42               	btfsc	Keyboard_Read@i+1,7,c
  2848  001508  D006               	goto	l1167
  2849  00150A  0EE8               	movlw	232
  2850  00150C  5C41               	subwf	Keyboard_Read@i,w,c
  2851  00150E  0E03               	movlw	3
  2852  001510  5842               	subwfb	Keyboard_Read@i+1,w,c
  2853  001512  B0D8               	btfsc	status,0,c
  2854  001514  D003               	goto	l236
  2855  001516                     l1167:
  2856  001516  4A41               	infsnz	Keyboard_Read@i,f,c
  2857  001518  2A42               	incf	Keyboard_Read@i+1,f,c
  2858  00151A  D7F5               	goto	l1163
  2859  00151C                     l236:
  2860                           
  2861                           ;Keyboard.c: 59: if (PORTEbits.RE4 == 0)
  2862  00151C  B884               	btfsc	3972,4,c	;volatile
  2863  00151E  D002               	goto	l237
  2864                           
  2865                           ;Keyboard.c: 60: {
  2866                           ;Keyboard.c: 61: Keyboard_Data = '1';
  2867  001520  0E31               	movlw	49
  2868  001522  D00B               	goto	L13
  2869  001524                     l237:
  2870                           
  2871                           ;Keyboard.c: 63: else if (PORTEbits.RE5 == 0)
  2872  001524  BA84               	btfsc	3972,5,c	;volatile
  2873  001526  D002               	goto	l239
  2874                           
  2875                           ;Keyboard.c: 64: {
  2876                           ;Keyboard.c: 65: Keyboard_Data = '4';
  2877  001528  0E34               	movlw	52
  2878  00152A  D007               	goto	L13
  2879  00152C                     l239:
  2880                           
  2881                           ;Keyboard.c: 67: else if (PORTEbits.RE6 == 0)
  2882  00152C  BC84               	btfsc	3972,6,c	;volatile
  2883  00152E  D002               	goto	l241
  2884                           
  2885                           ;Keyboard.c: 68: {
  2886                           ;Keyboard.c: 69: Keyboard_Data = '7';
  2887  001530  0E37               	movlw	55
  2888  001532  D003               	goto	L13
  2889  001534                     l241:
  2890                           
  2891                           ;Keyboard.c: 71: else if (PORTEbits.RE7 == 0)
  2892  001534  BE84               	btfsc	3972,7,c	;volatile
  2893  001536  D002               	goto	l238
  2894                           
  2895                           ;Keyboard.c: 72: {
  2896                           ;Keyboard.c: 73: Keyboard_Data = 'F';
  2897  001538  0E46               	movlw	70
  2898  00153A                     L13:
  2899  00153A  6E2E               	movwf	_Keyboard_Data,c
  2900  00153C                     l238:
  2901                           
  2902                           ;Keyboard.c: 74: }
  2903                           ;Keyboard.c: 76: PORTE = 0x0D;
  2904  00153C  0E0D               	movlw	13
  2905  00153E  6E84               	movwf	3972,c	;volatile
  2906                           
  2907                           ;Keyboard.c: 77: for(i=0;i<1000;i++);
  2908  001540  0E00               	movlw	0
  2909  001542  6E42               	movwf	Keyboard_Read@i+1,c
  2910  001544  0E00               	movlw	0
  2911  001546  6E41               	movwf	Keyboard_Read@i,c
  2912  001548                     l1179:
  2913  001548  BE42               	btfsc	Keyboard_Read@i+1,7,c
  2914  00154A  D006               	goto	l1183
  2915  00154C  0EE8               	movlw	232
  2916  00154E  5C41               	subwf	Keyboard_Read@i,w,c
  2917  001550  0E03               	movlw	3
  2918  001552  5842               	subwfb	Keyboard_Read@i+1,w,c
  2919  001554  B0D8               	btfsc	status,0,c
  2920  001556  D003               	goto	l245
  2921  001558                     l1183:
  2922  001558  4A41               	infsnz	Keyboard_Read@i,f,c
  2923  00155A  2A42               	incf	Keyboard_Read@i+1,f,c
  2924  00155C  D7F5               	goto	l1179
  2925  00155E                     l245:
  2926                           
  2927                           ;Keyboard.c: 78: if (PORTEbits.RE4 == 0)
  2928  00155E  B884               	btfsc	3972,4,c	;volatile
  2929  001560  D002               	goto	l246
  2930                           
  2931                           ;Keyboard.c: 79: {
  2932                           ;Keyboard.c: 80: Keyboard_Data = '2';
  2933  001562  0E32               	movlw	50
  2934  001564  D00B               	goto	L16
  2935  001566                     l246:
  2936                           
  2937                           ;Keyboard.c: 82: else if (PORTEbits.RE5 == 0)
  2938  001566  BA84               	btfsc	3972,5,c	;volatile
  2939  001568  D002               	goto	l248
  2940                           
  2941                           ;Keyboard.c: 83: {
  2942                           ;Keyboard.c: 84: Keyboard_Data = '5';
  2943  00156A  0E35               	movlw	53
  2944  00156C  D007               	goto	L16
  2945  00156E                     l248:
  2946                           
  2947                           ;Keyboard.c: 86: else if (PORTEbits.RE6 == 0)
  2948  00156E  BC84               	btfsc	3972,6,c	;volatile
  2949  001570  D002               	goto	l250
  2950                           
  2951                           ;Keyboard.c: 87: {
  2952                           ;Keyboard.c: 88: Keyboard_Data = '8';
  2953  001572  0E38               	movlw	56
  2954  001574  D003               	goto	L16
  2955  001576                     l250:
  2956                           
  2957                           ;Keyboard.c: 90: else if (PORTEbits.RE7 == 0)
  2958  001576  BE84               	btfsc	3972,7,c	;volatile
  2959  001578  D002               	goto	l247
  2960                           
  2961                           ;Keyboard.c: 91: {
  2962                           ;Keyboard.c: 92: Keyboard_Data = '0';
  2963  00157A  0E30               	movlw	48
  2964  00157C                     L16:
  2965  00157C  6E2E               	movwf	_Keyboard_Data,c
  2966  00157E                     l247:
  2967                           
  2968                           ;Keyboard.c: 93: }
  2969                           ;Keyboard.c: 95: PORTE = 0x0B;
  2970  00157E  0E0B               	movlw	11
  2971  001580  6E84               	movwf	3972,c	;volatile
  2972                           
  2973                           ;Keyboard.c: 96: for(i=0;i<1000;i++);
  2974  001582  0E00               	movlw	0
  2975  001584  6E42               	movwf	Keyboard_Read@i+1,c
  2976  001586  0E00               	movlw	0
  2977  001588  6E41               	movwf	Keyboard_Read@i,c
  2978  00158A                     l1195:
  2979  00158A  BE42               	btfsc	Keyboard_Read@i+1,7,c
  2980  00158C  D006               	goto	l1199
  2981  00158E  0EE8               	movlw	232
  2982  001590  5C41               	subwf	Keyboard_Read@i,w,c
  2983  001592  0E03               	movlw	3
  2984  001594  5842               	subwfb	Keyboard_Read@i+1,w,c
  2985  001596  B0D8               	btfsc	status,0,c
  2986  001598  D003               	goto	l254
  2987  00159A                     l1199:
  2988  00159A  4A41               	infsnz	Keyboard_Read@i,f,c
  2989  00159C  2A42               	incf	Keyboard_Read@i+1,f,c
  2990  00159E  D7F5               	goto	l1195
  2991  0015A0                     l254:
  2992                           
  2993                           ;Keyboard.c: 97: if (PORTEbits.RE4 == 0)
  2994  0015A0  B884               	btfsc	3972,4,c	;volatile
  2995  0015A2  D002               	goto	l255
  2996                           
  2997                           ;Keyboard.c: 98: {
  2998                           ;Keyboard.c: 99: Keyboard_Data = '3';
  2999  0015A4  0E33               	movlw	51
  3000  0015A6  D00B               	goto	L19
  3001  0015A8                     l255:
  3002                           
  3003                           ;Keyboard.c: 101: else if (PORTEbits.RE5 == 0)
  3004  0015A8  BA84               	btfsc	3972,5,c	;volatile
  3005  0015AA  D002               	goto	l257
  3006                           
  3007                           ;Keyboard.c: 102: {
  3008                           ;Keyboard.c: 103: Keyboard_Data = '6';
  3009  0015AC  0E36               	movlw	54
  3010  0015AE  D007               	goto	L19
  3011  0015B0                     l257:
  3012                           
  3013                           ;Keyboard.c: 105: else if (PORTEbits.RE6 == 0)
  3014  0015B0  BC84               	btfsc	3972,6,c	;volatile
  3015  0015B2  D002               	goto	l259
  3016                           
  3017                           ;Keyboard.c: 106: {
  3018                           ;Keyboard.c: 107: Keyboard_Data = '9';
  3019  0015B4  0E39               	movlw	57
  3020  0015B6  D003               	goto	L19
  3021  0015B8                     l259:
  3022                           
  3023                           ;Keyboard.c: 109: else if (PORTEbits.RE7 == 0)
  3024  0015B8  BE84               	btfsc	3972,7,c	;volatile
  3025  0015BA  D002               	goto	l256
  3026                           
  3027                           ;Keyboard.c: 110: {
  3028                           ;Keyboard.c: 111: Keyboard_Data = 'E';
  3029  0015BC  0E45               	movlw	69
  3030  0015BE                     L19:
  3031  0015BE  6E2E               	movwf	_Keyboard_Data,c
  3032  0015C0                     l256:
  3033                           
  3034                           ;Keyboard.c: 112: }
  3035                           ;Keyboard.c: 114: PORTE = 0x07;
  3036  0015C0  0E07               	movlw	7
  3037  0015C2  6E84               	movwf	3972,c	;volatile
  3038                           
  3039                           ;Keyboard.c: 115: for(i=0;i<1000;i++);
  3040  0015C4  0E00               	movlw	0
  3041  0015C6  6E42               	movwf	Keyboard_Read@i+1,c
  3042  0015C8  0E00               	movlw	0
  3043  0015CA  6E41               	movwf	Keyboard_Read@i,c
  3044  0015CC                     l1211:
  3045  0015CC  BE42               	btfsc	Keyboard_Read@i+1,7,c
  3046  0015CE  D006               	goto	l1215
  3047  0015D0  0EE8               	movlw	232
  3048  0015D2  5C41               	subwf	Keyboard_Read@i,w,c
  3049  0015D4  0E03               	movlw	3
  3050  0015D6  5842               	subwfb	Keyboard_Read@i+1,w,c
  3051  0015D8  B0D8               	btfsc	status,0,c
  3052  0015DA  D003               	goto	l263
  3053  0015DC                     l1215:
  3054  0015DC  4A41               	infsnz	Keyboard_Read@i,f,c
  3055  0015DE  2A42               	incf	Keyboard_Read@i+1,f,c
  3056  0015E0  D7F5               	goto	l1211
  3057  0015E2                     l263:
  3058                           
  3059                           ;Keyboard.c: 116: if (PORTEbits.RE4 == 0)
  3060  0015E2  B884               	btfsc	3972,4,c	;volatile
  3061  0015E4  D003               	goto	l264
  3062                           
  3063                           ;Keyboard.c: 117: {
  3064                           ;Keyboard.c: 118: Keyboard_Data = 'A';
  3065  0015E6  0E41               	movlw	65
  3066  0015E8  6E2E               	movwf	_Keyboard_Data,c
  3067                           
  3068                           ;Keyboard.c: 119: }
  3069  0015EA  0012               	return	
  3070  0015EC                     l264:
  3071                           
  3072                           ;Keyboard.c: 120: else if (PORTEbits.RE5 == 0)
  3073  0015EC  BA84               	btfsc	3972,5,c	;volatile
  3074  0015EE  D003               	goto	l266
  3075                           
  3076                           ;Keyboard.c: 121: {
  3077                           ;Keyboard.c: 122: Keyboard_Data = 'B';
  3078  0015F0  0E42               	movlw	66
  3079  0015F2  6E2E               	movwf	_Keyboard_Data,c
  3080                           
  3081                           ;Keyboard.c: 123: }
  3082  0015F4  0012               	return	
  3083  0015F6                     l266:
  3084                           
  3085                           ;Keyboard.c: 124: else if (PORTEbits.RE6 == 0)
  3086  0015F6  BC84               	btfsc	3972,6,c	;volatile
  3087  0015F8  D003               	goto	l268
  3088                           
  3089                           ;Keyboard.c: 125: {
  3090                           ;Keyboard.c: 126: Keyboard_Data = 'C';
  3091  0015FA  0E43               	movlw	67
  3092  0015FC  6E2E               	movwf	_Keyboard_Data,c
  3093                           
  3094                           ;Keyboard.c: 127: }
  3095  0015FE  0012               	return	
  3096  001600                     l268:
  3097                           
  3098                           ;Keyboard.c: 128: else if (PORTEbits.RE7 == 0)
  3099  001600  BE84               	btfsc	3972,7,c	;volatile
  3100  001602  0012               	return	
  3101                           
  3102                           ;Keyboard.c: 129: {
  3103                           ;Keyboard.c: 130: Keyboard_Data = 'D';
  3104  001604  0E44               	movlw	68
  3105  001606  6E2E               	movwf	_Keyboard_Data,c
  3106  001608  0012               	return	
  3107  00160A                     __end_of_Keyboard_Read:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           postinc0	equ	0xFEE
  3116                           wreg	equ	0xFE8
  3117                           indf1	equ	0xFE7
  3118                           fsr1h	equ	0xFE2
  3119                           fsr1l	equ	0xFE1
  3120                           indf2	equ	0xFDF
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _Interrupt_init *****************
  3126 ;; Defined at:
  3127 ;;		line 140 in file "main.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		None
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text13
  3156  0018A8                     __ptext13:
  3157                           	opt stack 0
  3158  0018A8                     _Interrupt_init:
  3159                           	opt stack 29
  3160                           
  3161                           ;main.c: 142: PIR1bits.RC1IF = 0;
  3162                           
  3163                           ;incstack = 0
  3164  0018A8  9A9E               	bcf	3998,5,c	;volatile
  3165                           
  3166                           ;main.c: 143: PIE1bits.RC1IE = 1;
  3167  0018AA  8A9D               	bsf	3997,5,c	;volatile
  3168                           
  3169                           ;main.c: 145: INTCONbits.PEIE = 1;
  3170  0018AC  8CF2               	bsf	intcon,6,c	;volatile
  3171                           
  3172                           ;main.c: 146: INTCONbits.GIE = 1;
  3173  0018AE  8EF2               	bsf	intcon,7,c	;volatile
  3174  0018B0  0012               	return		;funcret
  3175  0018B2                     __end_of_Interrupt_init:
  3176                           	opt stack 0
  3177                           tblptru	equ	0xFF8
  3178                           tblptrh	equ	0xFF7
  3179                           tblptrl	equ	0xFF6
  3180                           tablat	equ	0xFF5
  3181                           prodh	equ	0xFF4
  3182                           prodl	equ	0xFF3
  3183                           intcon	equ	0xFF2
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           indf1	equ	0xFE7
  3187                           fsr1h	equ	0xFE2
  3188                           fsr1l	equ	0xFE1
  3189                           indf2	equ	0xFDF
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _Interrupt *****************
  3195 ;; Defined at:
  3196 ;;		line 149 in file "main.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3212 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3213 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3214 ;;Total ram usage:       14 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		Interrupt level 2
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	intcode
  3224  000008                     __pintcode:
  3225                           	opt stack 0
  3226  000008                     _Interrupt:
  3227                           	opt stack 25
  3228                           
  3229                           ;incstack = 0
  3230  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3231  00000A  CFFA F033          	movff	pclath,??_Interrupt
  3232  00000E  CFFB F034          	movff	pclatu,??_Interrupt+1
  3233  000012  CFE9 F035          	movff	fsr0l,??_Interrupt+2
  3234  000016  CFEA F036          	movff	fsr0h,??_Interrupt+3
  3235  00001A  CFE1 F037          	movff	fsr1l,??_Interrupt+4
  3236  00001E  CFE2 F038          	movff	fsr1h,??_Interrupt+5
  3237  000022  CFD9 F039          	movff	fsr2l,??_Interrupt+6
  3238  000026  CFDA F03A          	movff	fsr2h,??_Interrupt+7
  3239  00002A  CFF3 F03B          	movff	prodl,??_Interrupt+8
  3240  00002E  CFF4 F03C          	movff	prodh,??_Interrupt+9
  3241  000032  CFF6 F03D          	movff	tblptrl,??_Interrupt+10
  3242  000036  CFF7 F03E          	movff	tblptrh,??_Interrupt+11
  3243  00003A  CFF8 F03F          	movff	tblptru,??_Interrupt+12
  3244  00003E  CFF5 F040          	movff	tablat,??_Interrupt+13
  3245                           
  3246                           ;main.c: 152: if(PIR1bits.RC1IF == 1)
  3247  000042  AA9E               	btfss	3998,5,c	;volatile
  3248  000044  D005               	goto	i2l77
  3249                           
  3250                           ;main.c: 153: {
  3251                           ;main.c: 154: UART_Data = RCREG;
  3252  000046  CFAE F031          	movff	4014,_UART_Data	;volatile
  3253                           
  3254                           ;main.c: 155: UART_NewData = 1;
  3255  00004A  0E01               	movlw	1
  3256  00004C  6E32               	movwf	_UART_NewData,c	;volatile
  3257                           
  3258                           ;main.c: 156: PIR1bits.RC1IF = 0;
  3259  00004E  9A9E               	bcf	3998,5,c	;volatile
  3260  000050                     i2l77:
  3261  000050  C040  FFF5         	movff	??_Interrupt+13,tablat
  3262  000054  C03F  FFF8         	movff	??_Interrupt+12,tblptru
  3263  000058  C03E  FFF7         	movff	??_Interrupt+11,tblptrh
  3264  00005C  C03D  FFF6         	movff	??_Interrupt+10,tblptrl
  3265  000060  C03C  FFF4         	movff	??_Interrupt+9,prodh
  3266  000064  C03B  FFF3         	movff	??_Interrupt+8,prodl
  3267  000068  C03A  FFDA         	movff	??_Interrupt+7,fsr2h
  3268  00006C  C039  FFD9         	movff	??_Interrupt+6,fsr2l
  3269  000070  C038  FFE2         	movff	??_Interrupt+5,fsr1h
  3270  000074  C037  FFE1         	movff	??_Interrupt+4,fsr1l
  3271  000078  C036  FFEA         	movff	??_Interrupt+3,fsr0h
  3272  00007C  C035  FFE9         	movff	??_Interrupt+2,fsr0l
  3273  000080  C034  FFFB         	movff	??_Interrupt+1,pclatu
  3274  000084  C033  FFFA         	movff	??_Interrupt,pclath
  3275  000088  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3276  00008A  0011               	retfie		f
  3277  00008C                     __end_of_Interrupt:
  3278                           	opt stack 0
  3279                           pclatu	equ	0xFFB
  3280                           pclath	equ	0xFFA
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           postinc0	equ	0xFEE
  3289                           fsr0h	equ	0xFEA
  3290                           fsr0l	equ	0xFE9
  3291                           wreg	equ	0xFE8
  3292                           indf1	equ	0xFE7
  3293                           fsr1h	equ	0xFE2
  3294                           fsr1l	equ	0xFE1
  3295                           indf2	equ	0xFDF
  3296                           fsr2h	equ	0xFDA
  3297                           fsr2l	equ	0xFD9
  3298                           status	equ	0xFD8
  3299                           pclatu	equ	0xFFB
  3300                           pclath	equ	0xFFA
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           intcon	equ	0xFF2
  3308                           postinc0	equ	0xFEE
  3309                           fsr0h	equ	0xFEA
  3310                           fsr0l	equ	0xFE9
  3311                           wreg	equ	0xFE8
  3312                           indf1	equ	0xFE7
  3313                           fsr1h	equ	0xFE2
  3314                           fsr1l	equ	0xFE1
  3315                           indf2	equ	0xFDF
  3316                           fsr2h	equ	0xFDA
  3317                           fsr2l	equ	0xFD9
  3318                           status	equ	0xFD8
  3319                           
  3320                           	psect	rparam
  3321  0000                     pclatu	equ	0xFFB
  3322                           pclath	equ	0xFFA
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           intcon	equ	0xFF2
  3330                           postinc0	equ	0xFEE
  3331                           fsr0h	equ	0xFEA
  3332                           fsr0l	equ	0xFE9
  3333                           wreg	equ	0xFE8
  3334                           indf1	equ	0xFE7
  3335                           fsr1h	equ	0xFE2
  3336                           fsr1l	equ	0xFE1
  3337                           indf2	equ	0xFDF
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342                           	psect	temp
  3343  000050                     btemp:
  3344                           	opt stack 0
  3345  000050                     	ds	1
  3346  0000                     int$flags	set	btemp
  3347                           pclatu	equ	0xFFB
  3348                           pclath	equ	0xFFA
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           postinc0	equ	0xFEE
  3357                           fsr0h	equ	0xFEA
  3358                           fsr0l	equ	0xFE9
  3359                           wreg	equ	0xFE8
  3360                           indf1	equ	0xFE7
  3361                           fsr1h	equ	0xFE2
  3362                           fsr1l	equ	0xFE1
  3363                           indf2	equ	0xFDF
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8


Data Sizes:
    Strings     247
    Constant    0
    Data        0
    BSS         92
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      79
    BANK0           160      9      51
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    LCD_WriteString@data	PTR unsigned char  size(2) Largest target is 20
		 -> STR_25(CODE[9]), STR_24(CODE[6]), STR_23(CODE[9]), STR_22(CODE[6]), 
		 -> STR_21(CODE[15]), STR_20(CODE[6]), STR_19(CODE[15]), STR_18(CODE[6]), 
		 -> STR_17(CODE[15]), STR_16(CODE[6]), STR_15(CODE[15]), STR_14(CODE[6]), 
		 -> STR_13(CODE[12]), STR_12(CODE[8]), STR_11(CODE[14]), STR_10(CODE[14]), 
		 -> STR_9(CODE[20]), STR_8(CODE[20]), STR_7(CODE[20]), STR_6(CODE[20]), 
		 -> STR_5(CODE[13]), STR_4(CODE[6]), STR_3(CODE[13]), STR_2(CODE[6]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_LCD_WriteChar
    _LCD_init->_WriteLCD
    _LCD_WriteString->_LCD_WriteChar
    _LCD_WriteChar->_LCD_SelectLine
    _LCD_SelectLine->_WriteLCD
    _LCD_Clear->_WriteLCD
    _WriteLCD->_WriteSPI2

Critical Paths under _Interrupt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_LCD_WriteString
    _LCD_WriteString->_LCD_WriteChar

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Interrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Interrupt in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12803
                     _Interrupt_init
                      _Keyboard_Read
                      _Keyboard_init
                          _LCD_Clear
                      _LCD_WriteChar
                    _LCD_WriteString
                           _LCD_init
                         _UART_Write
                          _UART_init
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0    1351
                          _SPI2_init
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (2) _SPI2_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      6     4      2    5930
                                              3 BANK0      6     4      2
                      _LCD_WriteChar
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteChar                                        7     7      0    3844
                                             25 COMRAM     4     4      0
                                              0 BANK0      3     3      0
                     _LCD_SelectLine
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (3) _LCD_SelectLine                                       2     2      0    1425
                                             23 COMRAM     2     2      0
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0    1543
                                             23 COMRAM     2     2      0
                           _WriteLCD
 ---------------------------------------------------------------------------------
 (2) _WriteLCD                                             7     6      1    1351
                                             16 COMRAM     7     6      1
                          _WriteSPI2
 ---------------------------------------------------------------------------------
 (3) _WriteSPI2                                            2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Keyboard_Read                                        2     2      0     120
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Interrupt                                           14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupt_init
   _Keyboard_Read
   _Keyboard_init
   _LCD_Clear
     _WriteLCD
       _WriteSPI2
   _LCD_WriteChar
     _LCD_SelectLine
       _WriteLCD
         _WriteSPI2
     _WriteLCD
       _WriteSPI2
   _LCD_WriteString
     _LCD_WriteChar
       _LCD_SelectLine
         _WriteLCD
           _WriteSPI2
       _WriteLCD
         _WriteSPI2
   _LCD_init
     _SPI2_init
     _WriteLCD
       _WriteSPI2
   _UART_Write
   _UART_init

 _Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0       0      33        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      9      33       5       31.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      4F       1       84.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       8        0.0%
DATA                 0      0      82       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Apr 18 14:04:13 2017

        ??_Interrupt_init 0041               __CFG_BORV$1 000000              __CFG_CP0$OFF 000000  
                     l125 177E                       l207 189E                       l241 1534  
                     l250 1576                       l171 168E                       l236 151C  
                     l245 155E                       l237 1524                       l254 15A0  
                     l246 1566                       l238 153C                       l263 15E2  
                     l255 15A8                       l247 157E                       l239 152C  
                     l264 15EC                       l256 15C0                       l248 156E  
                     l257 15B0                       l266 15F6                       l259 15B8  
                     l283 1884                       l268 1600                       prod 000FF3  
                     wreg 000FE8         ??_LCD_WriteString 008F    __size_of_Keyboard_Read 0156  
          _LCD_SelectLine 1780                      l1211 15CC                      l2003 137A  
                    l1215 15DC                      l2031 1424                      l2023 13F4  
                    l2015 13C4                      l2007 1394                      l1153 14D6  
                    l1163 1506                      l1155 14DC                      l1157 14E4  
                    l1183 1558                      l1167 1516                      l2047 1484  
                    l2039 1454                      l1195 158A                      l1179 1548  
                    l1199 159A                      l1813 1000                      l1805 0FC4  
                    l1823 1042                      l1807 0FE6                      l1911 1648  
                    l1729 169C                      l1921 1728                      l1753 1784  
                    l1841 10AE                      l1825 104C                      l1817 1016  
                    l1755 1788                      l1763 1796                      l1851 10EC  
                    l1835 108E                      l1907 1616                      l1925 1738  
                    l1757 178C                      l1765 17B2                      l1861 1134  
                    l1837 1098                      l1829 1062                      l1759 1790  
                    l1871 117C                      l1855 110C                      l1847 10DA  
                    l1951 126E                      l1881 11C2                      l1865 1154  
                    l1777 0F22                      l1891 11F4                      l1875 119C  
                    l1787 0F4C                      l1779 0F32                      l1971 12BC  
                    l1885 11D8                      l1797 0F8E                      l1789 0F74  
                    l1799 0FAE                      l1991 133E                      l1983 130A  
                    l1975 12D6                      l1897 1204                      l1987 1324  
                    l1979 12F0                      l1995 1356    __size_of_Keyboard_init 0012  
                    STR_1 0E51                      STR_2 0EF2                      STR_3 0EB9  
                    STR_4 0EF2                      STR_5 0EB9                      STR_6 0E01  
                    STR_7 0E3D                      STR_8 0E15                      STR_9 0E29  
                    i2l77 0050                      _main 121C        __size_of_LCD_Clear 006E  
                    fsr0h 000FEA                      fsr1h 000FE2                      fsr0l 000FE9  
                    fsr2h 000FDA                      indf1 000FE7                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9                      btemp 0050  
                    pclat 000FFA             __CFG_BOREN$ON 000000                      prodh 000FF4  
                    prodl 000FF3        __CFG_WDTWIN$PS25_0 000000                      start 008C  
           __CFG_IESO$OFF 000000        __CFG_LS48MHZ$SYSX2 000000             _LCD_WriteChar 0EFA  
            ___param_bank 000010          __end_of_LCD_init 17F6       LCD_WriteString@data 008D  
                   ?_main 0033                     STR_10 0E9D                     STR_11 0EAB  
                   STR_20 0EEC                     STR_12 0EE4                     STR_13 0EC6  
                   STR_21 0E7F                     STR_22 0EEC                     STR_14 0EEC  
                   STR_23 0ED2                     STR_15 0E61                     STR_24 0EEC  
                   STR_16 0EEC                     STR_25 0EDB                     STR_17 0E8E  
                   STR_18 0EEC                     STR_19 0E70            Keyboard_Read@i 0041  
                   _RCREG 000FAE                     _PORTE 000F84                     _TXREG 000FAD  
           __CFG_WPSA$128 000000    __end_of_LCD_SelectLine 17BE               ?_UART_Write 0033  
      __size_of_SPI2_init 0030          _Keyboard_NewData 002F        __size_of_UART_init 002A  
                   tablat 000FF5                     status 000FD8            ?_LCD_WriteChar 0033  
         __initialization 1850             _Keyboard_Data 002E              __end_of_main 14B4  
           _Keyboard_Read 14B4             _Keyboard_init 188A                    ??_main 0050  
       __end_of_LCD_Clear 1780             __activetblptr 000003       __CFG_WPEND$WPENDMEM 000000  
          __CFG_RETEN$OFF 000000           ?_LCD_SelectLine 0033            __CFG_POSCMD$MS 000000  
            _DataPosition 002D          __end_of_WriteLCD 1712            __CFG_WDTEN$OFF 000000  
                  _SPBRG1 000FAF            __CFG_XINST$OFF 000000            ?_Keyboard_Read 0033  
      __size_of_Interrupt 0084         __end_of_SPI2_init 1826       __size_of_UART_Write 000C  
          ?_Keyboard_init 0033         __end_of_UART_init 1850            __CFG_STVREN$ON 000000  
                  clear_0 1856                    clear_1 1862           __CFG_CLKOEN$OFF 000000  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8              WriteLCD@data 0043                __accesstop 0060  
 __end_of__initialization 1868        __size_of_WriteSPI2 0018           ??_LCD_WriteChar 004C  
      __CFG_DSWDTOSC$LPRC 000000                 ?_LCD_init 0033             ___rparam_used 000001  
         __CFG_T5GSEL$T5G 000000          LCD_WriteString@i 0091            __pcstackCOMRAM 0033  
         _LCD_WriteString 160A            _Keyboard_Ready 0030         __end_of_Interrupt 008C  
              WriteLCD@RS 0046                __pbssBANK0 0060          WriteSPI2@TempVar 0041  
              ??_LCD_init 004A           ??_Keyboard_Read 0041           ??_Keyboard_init 0041  
         __CFG_VBTBOR$OFF 000000                 ?_WriteLCD 0043         __end_of_WriteSPI2 188A  
         __CFG_WDTCLK$SYS 000000              ??_UART_Write 0041                   _SSP2BUF 000F03  
 __end_of_LCD_WriteString 1690                   __Hparam 0000                   __Lparam 0000  
       LCD_WriteChar@data 008A        __end_of_UART_Write 18A8              __psmallconst 0E00  
                 __pcinit 1850                ??_WriteLCD 0044                   __ramtop 0E00  
                 __ptext0 121C                   __ptext1 1826          ??_LCD_SelectLine 004A  
                 __ptext2 189C                   __ptext3 17BE                   __ptext4 17F6  
                 __ptext5 160A                   __ptext6 0EFA                   __ptext7 1780  
                 __ptext8 1712                   __ptext9 1690   __size_of_Interrupt_init 000A  
               _LCD_Clear 1712      end_of_initialization 1868                 _RCSTAbits 000FAB  
                 postinc0 000FEE          __CFG_FSCM$CSDCMD 000000          __CFG_DSBITEN$OFF 000000  
               _RPOR22_23 000E1D                 _RPOR24_25 000E1E                 _RPOR26_27 000E1F  
               _UART_Data 0031                 _SPI2_init 17F6                 _UART_init 1826  
               _PORTDbits 000F83                 _PORTEbits 000F84          __CFG_DSBOREN$OFF 000000  
          UART_Write@data 0041          __CFG_FOSC$PRIPLL 000000                 _TRISDbits 000F95  
               _TRISEbits 000F96                ?_LCD_Clear 0033      __CFG_CINASEL$DEFAULT 000000  
               _DataLine1 0060                 _DataLine2 0001                 _DataLine3 0016  
               _DataLine4 0075                 _TXSTAbits 000FAC                LCD_Clear@i 004A  
        __CFG_IOL1WAY$OFF 000000          ?_LCD_WriteString 008D         __size_of_LCD_init 0038  
       __CFG_WPFP$WPFP255 000000               _BAUDCONbits 000F67                ?_SPI2_init 0033  
              ?_UART_init 0033          __CFG_DSWDTEN$OFF 000000       start_initialization 1850  
               _Interrupt 0008     __end_of_LCD_WriteChar 121C         __size_of_WriteLCD 0082  
          _Interrupt_init 18A8               __pbssCOMRAM 0001             __pcstackBANK0 008A  
               _WriteSPI2 1872               ??_LCD_Clear 004A          __CFG_PLLDIV$DIV2 000000  
              ?_Interrupt 0033     __end_of_Keyboard_Read 160A         WriteSPI2@data_out 0042  
               __pintcode 0008     __end_of_Keyboard_init 189C               ??_SPI2_init 0041  
             ??_UART_init 0041    __end_of_Interrupt_init 18B2               __smallconst 0E00  
              ?_WriteSPI2 0033                  _LCD_init 17BE                  _PIE1bits 000F9D  
                _PIR1bits 000F9E                  _PIR2bits 000FA1          __CFG_WDTPS$32768 000000  
                _RPINR0_1 000E2A                  _SSP2CON1 000F19           ?_Interrupt_init 0033  
        __CFG_SOSCSEL$LOW 000000          __CFG_WPDIS$WPDIS 000000               ??_Interrupt 0033  
                __Hrparam 0000                  __Lrparam 0000            LCD_WriteChar@i 008B  
                _WriteLCD 1690                  _debounce 002B               ??_WriteSPI2 0041  
                __ptext10 1872                  __ptext11 188A                  __ptext12 14B4  
                __ptext13 18A8              _SSP2CON1bits 000F19   __size_of_LCD_SelectLine 003E  
             _OSCCON2bits 000F66              _UART_NewData 0032             __size_of_main 0298  
      __CFG_MSSPMSK1$MSK7 000000        __CFG_MSSPMSK2$MSK7 000000                  int$flags 0050  
       WriteLCD@LowerData 0047  __size_of_LCD_WriteString 0086              _SSP2STATbits 000F1A  
              _INTCONbits 000FF2         WriteLCD@StartByte 0049         WriteLCD@UpperData 0048  
                intlevel2 0000        LCD_SelectLine@data 004B        LCD_SelectLine@line 004A  
              _RPINR12_13 000E30    __size_of_LCD_WriteChar 0322                _UART_Write 189C  
     __CFG_WPCFG$WPCFGDIS 000000        __CFG_WINDIS$WDTSTD 000000    __CFG_DSWDTPS$DSWDTPS1F 000000  
